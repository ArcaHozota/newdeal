// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"newdeal/ent/auth"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Auth is the model entity for the Auth schema.
type Auth struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int64 `json:"id,omitempty"`
	// 権限名称
	Name string `json:"name,omitempty"`
	// 漢字名称
	Title string `json:"title,omitempty"`
	// 分類ID
	CategoryID int64 `json:"category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthQuery when eager-loading is set.
	Edges        AuthEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthEdges holds the relations/edges for other nodes in the graph.
type AuthEdges struct {
	// ToRoles holds the value of the to_roles edge.
	ToRoles []*Role `json:"to_roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ToRolesOrErr returns the ToRoles value or an error if the edge
// was not loaded in eager-loading.
func (e AuthEdges) ToRolesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.ToRoles, nil
	}
	return nil, &NotLoadedError{edge: "to_roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Auth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auth.FieldID, auth.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case auth.FieldName, auth.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Auth fields.
func (a *Auth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case auth.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case auth.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case auth.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				a.CategoryID = value.Int64
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Auth.
// This includes values selected through modifiers, order, etc.
func (a *Auth) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryToRoles queries the "to_roles" edge of the Auth entity.
func (a *Auth) QueryToRoles() *RoleQuery {
	return NewAuthClient(a.config).QueryToRoles(a)
}

// Update returns a builder for updating this Auth.
// Note that you need to call Auth.Unwrap() before calling this method if this Auth
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Auth) Update() *AuthUpdateOne {
	return NewAuthClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Auth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Auth) Unwrap() *Auth {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Auth is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Auth) String() string {
	var builder strings.Builder
	builder.WriteString("Auth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Auths is a parsable slice of Auth.
type Auths []*Auth
