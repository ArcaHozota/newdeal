// Code generated by ent, DO NOT EDIT.

package student

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the student type in the database.
	Label = "student"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLoginAccount holds the string denoting the login_account field in the database.
	FieldLoginAccount = "login_account"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldVisibleFlg holds the string denoting the visible_flg field in the database.
	FieldVisibleFlg = "visible_flg"
	// EdgeUpdatedHymns holds the string denoting the updated_hymns edge name in mutations.
	EdgeUpdatedHymns = "updated_hymns"
	// EdgeStudentRole holds the string denoting the student_role edge name in mutations.
	EdgeStudentRole = "student_role"
	// Table holds the table name of the student in the database.
	Table = "students"
	// UpdatedHymnsTable is the table that holds the updated_hymns relation/edge.
	UpdatedHymnsTable = "hymns"
	// UpdatedHymnsInverseTable is the table name for the Hymn entity.
	// It exists in this package in order to avoid circular dependency with the "hymn" package.
	UpdatedHymnsInverseTable = "hymns"
	// UpdatedHymnsColumn is the table column denoting the updated_hymns relation/edge.
	UpdatedHymnsColumn = "updated_user"
	// StudentRoleTable is the table that holds the student_role relation/edge.
	StudentRoleTable = "students"
	// StudentRoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	StudentRoleInverseTable = "roles"
	// StudentRoleColumn is the table column denoting the student_role relation/edge.
	StudentRoleColumn = "role_id"
)

// Columns holds all SQL columns for student fields.
var Columns = []string{
	FieldID,
	FieldLoginAccount,
	FieldPassword,
	FieldUsername,
	FieldDateOfBirth,
	FieldRoleID,
	FieldEmail,
	FieldUpdatedTime,
	FieldVisibleFlg,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Student queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLoginAccount orders the results by the login_account field.
func ByLoginAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginAccount, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the date_of_birth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByVisibleFlg orders the results by the visible_flg field.
func ByVisibleFlg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibleFlg, opts...).ToFunc()
}

// ByUpdatedHymnsCount orders the results by updated_hymns count.
func ByUpdatedHymnsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUpdatedHymnsStep(), opts...)
	}
}

// ByUpdatedHymns orders the results by updated_hymns terms.
func ByUpdatedHymns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedHymnsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStudentRoleField orders the results by student_role field.
func ByStudentRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentRoleStep(), sql.OrderByField(field, opts...))
	}
}
func newUpdatedHymnsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedHymnsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UpdatedHymnsTable, UpdatedHymnsColumn),
	)
}
func newStudentRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentRoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StudentRoleTable, StudentRoleColumn),
	)
}
