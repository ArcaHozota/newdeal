// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newdeal/ent/chapter"
	"newdeal/ent/phrase"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhraseCreate is the builder for creating a Phrase entity.
type PhraseCreate struct {
	config
	mutation *PhraseMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PhraseCreate) SetName(s string) *PhraseCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetTextEn sets the "text_en" field.
func (pc *PhraseCreate) SetTextEn(s string) *PhraseCreate {
	pc.mutation.SetTextEn(s)
	return pc
}

// SetTextJp sets the "text_jp" field.
func (pc *PhraseCreate) SetTextJp(s string) *PhraseCreate {
	pc.mutation.SetTextJp(s)
	return pc
}

// SetChapterID sets the "chapter_id" field.
func (pc *PhraseCreate) SetChapterID(i int32) *PhraseCreate {
	pc.mutation.SetChapterID(i)
	return pc
}

// SetChangeLine sets the "change_line" field.
func (pc *PhraseCreate) SetChangeLine(b bool) *PhraseCreate {
	pc.mutation.SetChangeLine(b)
	return pc
}

// SetID sets the "id" field.
func (pc *PhraseCreate) SetID(i int64) *PhraseCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetPhraseChapterID sets the "phrase_chapter" edge to the Chapter entity by ID.
func (pc *PhraseCreate) SetPhraseChapterID(id int32) *PhraseCreate {
	pc.mutation.SetPhraseChapterID(id)
	return pc
}

// SetPhraseChapter sets the "phrase_chapter" edge to the Chapter entity.
func (pc *PhraseCreate) SetPhraseChapter(c *Chapter) *PhraseCreate {
	return pc.SetPhraseChapterID(c.ID)
}

// Mutation returns the PhraseMutation object of the builder.
func (pc *PhraseCreate) Mutation() *PhraseMutation {
	return pc.mutation
}

// Save creates the Phrase in the database.
func (pc *PhraseCreate) Save(ctx context.Context) (*Phrase, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PhraseCreate) SaveX(ctx context.Context) *Phrase {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PhraseCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PhraseCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PhraseCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Phrase.name"`)}
	}
	if _, ok := pc.mutation.TextEn(); !ok {
		return &ValidationError{Name: "text_en", err: errors.New(`ent: missing required field "Phrase.text_en"`)}
	}
	if _, ok := pc.mutation.TextJp(); !ok {
		return &ValidationError{Name: "text_jp", err: errors.New(`ent: missing required field "Phrase.text_jp"`)}
	}
	if _, ok := pc.mutation.ChapterID(); !ok {
		return &ValidationError{Name: "chapter_id", err: errors.New(`ent: missing required field "Phrase.chapter_id"`)}
	}
	if _, ok := pc.mutation.ChangeLine(); !ok {
		return &ValidationError{Name: "change_line", err: errors.New(`ent: missing required field "Phrase.change_line"`)}
	}
	if len(pc.mutation.PhraseChapterIDs()) == 0 {
		return &ValidationError{Name: "phrase_chapter", err: errors.New(`ent: missing required edge "Phrase.phrase_chapter"`)}
	}
	return nil
}

func (pc *PhraseCreate) sqlSave(ctx context.Context) (*Phrase, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PhraseCreate) createSpec() (*Phrase, *sqlgraph.CreateSpec) {
	var (
		_node = &Phrase{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(phrase.Table, sqlgraph.NewFieldSpec(phrase.FieldID, field.TypeInt64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(phrase.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.TextEn(); ok {
		_spec.SetField(phrase.FieldTextEn, field.TypeString, value)
		_node.TextEn = value
	}
	if value, ok := pc.mutation.TextJp(); ok {
		_spec.SetField(phrase.FieldTextJp, field.TypeString, value)
		_node.TextJp = value
	}
	if value, ok := pc.mutation.ChangeLine(); ok {
		_spec.SetField(phrase.FieldChangeLine, field.TypeBool, value)
		_node.ChangeLine = value
	}
	if nodes := pc.mutation.PhraseChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phrase.PhraseChapterTable,
			Columns: []string{phrase.PhraseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChapterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PhraseCreateBulk is the builder for creating many Phrase entities in bulk.
type PhraseCreateBulk struct {
	config
	err      error
	builders []*PhraseCreate
}

// Save creates the Phrase entities in the database.
func (pcb *PhraseCreateBulk) Save(ctx context.Context) ([]*Phrase, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Phrase, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhraseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PhraseCreateBulk) SaveX(ctx context.Context) []*Phrase {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PhraseCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PhraseCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
