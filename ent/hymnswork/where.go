// Code generated by ent, DO NOT EDIT.

package hymnswork

import (
	"newdeal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLTE(FieldID, id))
}

// WorkID applies equality check predicate on the "work_id" field. It's identical to WorkIDEQ.
func WorkID(v uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldWorkID, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v []byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldScore, v))
}

// NameJpRational applies equality check predicate on the "name_jp_rational" field. It's identical to NameJpRationalEQ.
func NameJpRational(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldNameJpRational, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldUpdatedTime, v))
}

// Biko applies equality check predicate on the "biko" field. It's identical to BikoEQ.
func Biko(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldBiko, v))
}

// WorkIDEQ applies the EQ predicate on the "work_id" field.
func WorkIDEQ(v uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldWorkID, v))
}

// WorkIDNEQ applies the NEQ predicate on the "work_id" field.
func WorkIDNEQ(v uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNEQ(FieldWorkID, v))
}

// WorkIDIn applies the In predicate on the "work_id" field.
func WorkIDIn(vs ...uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldIn(FieldWorkID, vs...))
}

// WorkIDNotIn applies the NotIn predicate on the "work_id" field.
func WorkIDNotIn(vs ...uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNotIn(FieldWorkID, vs...))
}

// WorkIDGT applies the GT predicate on the "work_id" field.
func WorkIDGT(v uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGT(FieldWorkID, v))
}

// WorkIDGTE applies the GTE predicate on the "work_id" field.
func WorkIDGTE(v uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGTE(FieldWorkID, v))
}

// WorkIDLT applies the LT predicate on the "work_id" field.
func WorkIDLT(v uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLT(FieldWorkID, v))
}

// WorkIDLTE applies the LTE predicate on the "work_id" field.
func WorkIDLTE(v uuid.UUID) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLTE(FieldWorkID, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v []byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v []byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...[]byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...[]byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v []byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v []byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v []byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v []byte) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLTE(FieldScore, v))
}

// NameJpRationalEQ applies the EQ predicate on the "name_jp_rational" field.
func NameJpRationalEQ(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldNameJpRational, v))
}

// NameJpRationalNEQ applies the NEQ predicate on the "name_jp_rational" field.
func NameJpRationalNEQ(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNEQ(FieldNameJpRational, v))
}

// NameJpRationalIn applies the In predicate on the "name_jp_rational" field.
func NameJpRationalIn(vs ...string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldIn(FieldNameJpRational, vs...))
}

// NameJpRationalNotIn applies the NotIn predicate on the "name_jp_rational" field.
func NameJpRationalNotIn(vs ...string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNotIn(FieldNameJpRational, vs...))
}

// NameJpRationalGT applies the GT predicate on the "name_jp_rational" field.
func NameJpRationalGT(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGT(FieldNameJpRational, v))
}

// NameJpRationalGTE applies the GTE predicate on the "name_jp_rational" field.
func NameJpRationalGTE(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGTE(FieldNameJpRational, v))
}

// NameJpRationalLT applies the LT predicate on the "name_jp_rational" field.
func NameJpRationalLT(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLT(FieldNameJpRational, v))
}

// NameJpRationalLTE applies the LTE predicate on the "name_jp_rational" field.
func NameJpRationalLTE(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLTE(FieldNameJpRational, v))
}

// NameJpRationalContains applies the Contains predicate on the "name_jp_rational" field.
func NameJpRationalContains(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldContains(FieldNameJpRational, v))
}

// NameJpRationalHasPrefix applies the HasPrefix predicate on the "name_jp_rational" field.
func NameJpRationalHasPrefix(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldHasPrefix(FieldNameJpRational, v))
}

// NameJpRationalHasSuffix applies the HasSuffix predicate on the "name_jp_rational" field.
func NameJpRationalHasSuffix(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldHasSuffix(FieldNameJpRational, v))
}

// NameJpRationalEqualFold applies the EqualFold predicate on the "name_jp_rational" field.
func NameJpRationalEqualFold(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEqualFold(FieldNameJpRational, v))
}

// NameJpRationalContainsFold applies the ContainsFold predicate on the "name_jp_rational" field.
func NameJpRationalContainsFold(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldContainsFold(FieldNameJpRational, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLTE(FieldUpdatedTime, v))
}

// BikoEQ applies the EQ predicate on the "biko" field.
func BikoEQ(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEQ(FieldBiko, v))
}

// BikoNEQ applies the NEQ predicate on the "biko" field.
func BikoNEQ(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNEQ(FieldBiko, v))
}

// BikoIn applies the In predicate on the "biko" field.
func BikoIn(vs ...string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldIn(FieldBiko, vs...))
}

// BikoNotIn applies the NotIn predicate on the "biko" field.
func BikoNotIn(vs ...string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldNotIn(FieldBiko, vs...))
}

// BikoGT applies the GT predicate on the "biko" field.
func BikoGT(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGT(FieldBiko, v))
}

// BikoGTE applies the GTE predicate on the "biko" field.
func BikoGTE(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldGTE(FieldBiko, v))
}

// BikoLT applies the LT predicate on the "biko" field.
func BikoLT(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLT(FieldBiko, v))
}

// BikoLTE applies the LTE predicate on the "biko" field.
func BikoLTE(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldLTE(FieldBiko, v))
}

// BikoContains applies the Contains predicate on the "biko" field.
func BikoContains(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldContains(FieldBiko, v))
}

// BikoHasPrefix applies the HasPrefix predicate on the "biko" field.
func BikoHasPrefix(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldHasPrefix(FieldBiko, v))
}

// BikoHasSuffix applies the HasSuffix predicate on the "biko" field.
func BikoHasSuffix(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldHasSuffix(FieldBiko, v))
}

// BikoEqualFold applies the EqualFold predicate on the "biko" field.
func BikoEqualFold(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldEqualFold(FieldBiko, v))
}

// BikoContainsFold applies the ContainsFold predicate on the "biko" field.
func BikoContainsFold(v string) predicate.HymnsWork {
	return predicate.HymnsWork(sql.FieldContainsFold(FieldBiko, v))
}

// HasHymns applies the HasEdge predicate on the "hymns" edge.
func HasHymns() predicate.HymnsWork {
	return predicate.HymnsWork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, HymnsTable, HymnsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHymnsWith applies the HasEdge predicate on the "hymns" edge with a given conditions (other predicates).
func HasHymnsWith(preds ...predicate.Hymn) predicate.HymnsWork {
	return predicate.HymnsWork(func(s *sql.Selector) {
		step := newHymnsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HymnsWork) predicate.HymnsWork {
	return predicate.HymnsWork(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HymnsWork) predicate.HymnsWork {
	return predicate.HymnsWork(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HymnsWork) predicate.HymnsWork {
	return predicate.HymnsWork(sql.NotPredicates(p))
}
