// Code generated by ent, DO NOT EDIT.

package hymnswork

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hymnswork type in the database.
	Label = "hymns_work"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWorkID holds the string denoting the work_id field in the database.
	FieldWorkID = "work_id"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldNameJpRational holds the string denoting the name_jp_rational field in the database.
	FieldNameJpRational = "name_jp_rational"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldBiko holds the string denoting the biko field in the database.
	FieldBiko = "biko"
	// EdgeLinkedHymn holds the string denoting the linked_hymn edge name in mutations.
	EdgeLinkedHymn = "linked_hymn"
	// Table holds the table name of the hymnswork in the database.
	Table = "hymns_work"
	// LinkedHymnTable is the table that holds the linked_hymn relation/edge.
	LinkedHymnTable = "hymns_work"
	// LinkedHymnInverseTable is the table name for the Hymn entity.
	// It exists in this package in order to avoid circular dependency with the "hymn" package.
	LinkedHymnInverseTable = "hymns"
	// LinkedHymnColumn is the table column denoting the linked_hymn relation/edge.
	LinkedHymnColumn = "work_id"
)

// Columns holds all SQL columns for hymnswork fields.
var Columns = []string{
	FieldID,
	FieldWorkID,
	FieldScore,
	FieldNameJpRational,
	FieldUpdatedTime,
	FieldBiko,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameJpRationalValidator is a validator for the "name_jp_rational" field. It is called by the builders before save.
	NameJpRationalValidator func(string) error
)

// OrderOption defines the ordering options for the HymnsWork queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWorkID orders the results by the work_id field.
func ByWorkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkID, opts...).ToFunc()
}

// ByNameJpRational orders the results by the name_jp_rational field.
func ByNameJpRational(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameJpRational, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByBiko orders the results by the biko field.
func ByBiko(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBiko, opts...).ToFunc()
}

// ByLinkedHymnField orders the results by linked_hymn field.
func ByLinkedHymnField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLinkedHymnStep(), sql.OrderByField(field, opts...))
	}
}
func newLinkedHymnStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LinkedHymnInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, LinkedHymnTable, LinkedHymnColumn),
	)
}
