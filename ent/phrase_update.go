// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newdeal/ent/chapter"
	"newdeal/ent/phrase"
	"newdeal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhraseUpdate is the builder for updating Phrase entities.
type PhraseUpdate struct {
	config
	hooks    []Hook
	mutation *PhraseMutation
}

// Where appends a list predicates to the PhraseUpdate builder.
func (pu *PhraseUpdate) Where(ps ...predicate.Phrase) *PhraseUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PhraseUpdate) SetName(s string) *PhraseUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PhraseUpdate) SetNillableName(s *string) *PhraseUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetTextEn sets the "text_en" field.
func (pu *PhraseUpdate) SetTextEn(s string) *PhraseUpdate {
	pu.mutation.SetTextEn(s)
	return pu
}

// SetNillableTextEn sets the "text_en" field if the given value is not nil.
func (pu *PhraseUpdate) SetNillableTextEn(s *string) *PhraseUpdate {
	if s != nil {
		pu.SetTextEn(*s)
	}
	return pu
}

// SetTextJp sets the "text_jp" field.
func (pu *PhraseUpdate) SetTextJp(s string) *PhraseUpdate {
	pu.mutation.SetTextJp(s)
	return pu
}

// SetNillableTextJp sets the "text_jp" field if the given value is not nil.
func (pu *PhraseUpdate) SetNillableTextJp(s *string) *PhraseUpdate {
	if s != nil {
		pu.SetTextJp(*s)
	}
	return pu
}

// SetChapterID sets the "chapter_id" field.
func (pu *PhraseUpdate) SetChapterID(i int32) *PhraseUpdate {
	pu.mutation.SetChapterID(i)
	return pu
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (pu *PhraseUpdate) SetNillableChapterID(i *int32) *PhraseUpdate {
	if i != nil {
		pu.SetChapterID(*i)
	}
	return pu
}

// SetChangeLine sets the "change_line" field.
func (pu *PhraseUpdate) SetChangeLine(b bool) *PhraseUpdate {
	pu.mutation.SetChangeLine(b)
	return pu
}

// SetNillableChangeLine sets the "change_line" field if the given value is not nil.
func (pu *PhraseUpdate) SetNillableChangeLine(b *bool) *PhraseUpdate {
	if b != nil {
		pu.SetChangeLine(*b)
	}
	return pu
}

// SetPhraseChapterID sets the "phrase_chapter" edge to the Chapter entity by ID.
func (pu *PhraseUpdate) SetPhraseChapterID(id int32) *PhraseUpdate {
	pu.mutation.SetPhraseChapterID(id)
	return pu
}

// SetPhraseChapter sets the "phrase_chapter" edge to the Chapter entity.
func (pu *PhraseUpdate) SetPhraseChapter(c *Chapter) *PhraseUpdate {
	return pu.SetPhraseChapterID(c.ID)
}

// Mutation returns the PhraseMutation object of the builder.
func (pu *PhraseUpdate) Mutation() *PhraseMutation {
	return pu.mutation
}

// ClearPhraseChapter clears the "phrase_chapter" edge to the Chapter entity.
func (pu *PhraseUpdate) ClearPhraseChapter() *PhraseUpdate {
	pu.mutation.ClearPhraseChapter()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PhraseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PhraseUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PhraseUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PhraseUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PhraseUpdate) check() error {
	if pu.mutation.PhraseChapterCleared() && len(pu.mutation.PhraseChapterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Phrase.phrase_chapter"`)
	}
	return nil
}

func (pu *PhraseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(phrase.Table, phrase.Columns, sqlgraph.NewFieldSpec(phrase.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(phrase.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.TextEn(); ok {
		_spec.SetField(phrase.FieldTextEn, field.TypeString, value)
	}
	if value, ok := pu.mutation.TextJp(); ok {
		_spec.SetField(phrase.FieldTextJp, field.TypeString, value)
	}
	if value, ok := pu.mutation.ChangeLine(); ok {
		_spec.SetField(phrase.FieldChangeLine, field.TypeBool, value)
	}
	if pu.mutation.PhraseChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phrase.PhraseChapterTable,
			Columns: []string{phrase.PhraseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PhraseChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phrase.PhraseChapterTable,
			Columns: []string{phrase.PhraseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phrase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PhraseUpdateOne is the builder for updating a single Phrase entity.
type PhraseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhraseMutation
}

// SetName sets the "name" field.
func (puo *PhraseUpdateOne) SetName(s string) *PhraseUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PhraseUpdateOne) SetNillableName(s *string) *PhraseUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetTextEn sets the "text_en" field.
func (puo *PhraseUpdateOne) SetTextEn(s string) *PhraseUpdateOne {
	puo.mutation.SetTextEn(s)
	return puo
}

// SetNillableTextEn sets the "text_en" field if the given value is not nil.
func (puo *PhraseUpdateOne) SetNillableTextEn(s *string) *PhraseUpdateOne {
	if s != nil {
		puo.SetTextEn(*s)
	}
	return puo
}

// SetTextJp sets the "text_jp" field.
func (puo *PhraseUpdateOne) SetTextJp(s string) *PhraseUpdateOne {
	puo.mutation.SetTextJp(s)
	return puo
}

// SetNillableTextJp sets the "text_jp" field if the given value is not nil.
func (puo *PhraseUpdateOne) SetNillableTextJp(s *string) *PhraseUpdateOne {
	if s != nil {
		puo.SetTextJp(*s)
	}
	return puo
}

// SetChapterID sets the "chapter_id" field.
func (puo *PhraseUpdateOne) SetChapterID(i int32) *PhraseUpdateOne {
	puo.mutation.SetChapterID(i)
	return puo
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (puo *PhraseUpdateOne) SetNillableChapterID(i *int32) *PhraseUpdateOne {
	if i != nil {
		puo.SetChapterID(*i)
	}
	return puo
}

// SetChangeLine sets the "change_line" field.
func (puo *PhraseUpdateOne) SetChangeLine(b bool) *PhraseUpdateOne {
	puo.mutation.SetChangeLine(b)
	return puo
}

// SetNillableChangeLine sets the "change_line" field if the given value is not nil.
func (puo *PhraseUpdateOne) SetNillableChangeLine(b *bool) *PhraseUpdateOne {
	if b != nil {
		puo.SetChangeLine(*b)
	}
	return puo
}

// SetPhraseChapterID sets the "phrase_chapter" edge to the Chapter entity by ID.
func (puo *PhraseUpdateOne) SetPhraseChapterID(id int32) *PhraseUpdateOne {
	puo.mutation.SetPhraseChapterID(id)
	return puo
}

// SetPhraseChapter sets the "phrase_chapter" edge to the Chapter entity.
func (puo *PhraseUpdateOne) SetPhraseChapter(c *Chapter) *PhraseUpdateOne {
	return puo.SetPhraseChapterID(c.ID)
}

// Mutation returns the PhraseMutation object of the builder.
func (puo *PhraseUpdateOne) Mutation() *PhraseMutation {
	return puo.mutation
}

// ClearPhraseChapter clears the "phrase_chapter" edge to the Chapter entity.
func (puo *PhraseUpdateOne) ClearPhraseChapter() *PhraseUpdateOne {
	puo.mutation.ClearPhraseChapter()
	return puo
}

// Where appends a list predicates to the PhraseUpdate builder.
func (puo *PhraseUpdateOne) Where(ps ...predicate.Phrase) *PhraseUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PhraseUpdateOne) Select(field string, fields ...string) *PhraseUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Phrase entity.
func (puo *PhraseUpdateOne) Save(ctx context.Context) (*Phrase, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PhraseUpdateOne) SaveX(ctx context.Context) *Phrase {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PhraseUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PhraseUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PhraseUpdateOne) check() error {
	if puo.mutation.PhraseChapterCleared() && len(puo.mutation.PhraseChapterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Phrase.phrase_chapter"`)
	}
	return nil
}

func (puo *PhraseUpdateOne) sqlSave(ctx context.Context) (_node *Phrase, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(phrase.Table, phrase.Columns, sqlgraph.NewFieldSpec(phrase.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Phrase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, phrase.FieldID)
		for _, f := range fields {
			if !phrase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != phrase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(phrase.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.TextEn(); ok {
		_spec.SetField(phrase.FieldTextEn, field.TypeString, value)
	}
	if value, ok := puo.mutation.TextJp(); ok {
		_spec.SetField(phrase.FieldTextJp, field.TypeString, value)
	}
	if value, ok := puo.mutation.ChangeLine(); ok {
		_spec.SetField(phrase.FieldChangeLine, field.TypeBool, value)
	}
	if puo.mutation.PhraseChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phrase.PhraseChapterTable,
			Columns: []string{phrase.PhraseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PhraseChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phrase.PhraseChapterTable,
			Columns: []string{phrase.PhraseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Phrase{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phrase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
