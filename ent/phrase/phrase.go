// Code generated by ent, DO NOT EDIT.

package phrase

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the phrase type in the database.
	Label = "phrase"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTextEn holds the string denoting the text_en field in the database.
	FieldTextEn = "text_en"
	// FieldTextJp holds the string denoting the text_jp field in the database.
	FieldTextJp = "text_jp"
	// FieldChapterID holds the string denoting the chapter_id field in the database.
	FieldChapterID = "chapter_id"
	// FieldChangeLine holds the string denoting the change_line field in the database.
	FieldChangeLine = "change_line"
	// EdgePhraseChapter holds the string denoting the phrase_chapter edge name in mutations.
	EdgePhraseChapter = "phrase_chapter"
	// Table holds the table name of the phrase in the database.
	Table = "phrases"
	// PhraseChapterTable is the table that holds the phrase_chapter relation/edge.
	PhraseChapterTable = "phrases"
	// PhraseChapterInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	PhraseChapterInverseTable = "chapters"
	// PhraseChapterColumn is the table column denoting the phrase_chapter relation/edge.
	PhraseChapterColumn = "chapter_id"
)

// Columns holds all SQL columns for phrase fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTextEn,
	FieldTextJp,
	FieldChapterID,
	FieldChangeLine,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Phrase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTextEn orders the results by the text_en field.
func ByTextEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextEn, opts...).ToFunc()
}

// ByTextJp orders the results by the text_jp field.
func ByTextJp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextJp, opts...).ToFunc()
}

// ByChapterID orders the results by the chapter_id field.
func ByChapterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChapterID, opts...).ToFunc()
}

// ByChangeLine orders the results by the change_line field.
func ByChangeLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeLine, opts...).ToFunc()
}

// ByPhraseChapterField orders the results by phrase_chapter field.
func ByPhraseChapterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPhraseChapterStep(), sql.OrderByField(field, opts...))
	}
}
func newPhraseChapterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PhraseChapterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PhraseChapterTable, PhraseChapterColumn),
	)
}
