// Code generated by ent, DO NOT EDIT.

package phrase

import (
	"newdeal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Phrase {
	return predicate.Phrase(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldName, v))
}

// TextEn applies equality check predicate on the "text_en" field. It's identical to TextEnEQ.
func TextEn(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldTextEn, v))
}

// TextJp applies equality check predicate on the "text_jp" field. It's identical to TextJpEQ.
func TextJp(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldTextJp, v))
}

// ChapterID applies equality check predicate on the "chapter_id" field. It's identical to ChapterIDEQ.
func ChapterID(v int32) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldChapterID, v))
}

// ChangeLine applies equality check predicate on the "change_line" field. It's identical to ChangeLineEQ.
func ChangeLine(v bool) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldChangeLine, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Phrase {
	return predicate.Phrase(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Phrase {
	return predicate.Phrase(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldContainsFold(FieldName, v))
}

// TextEnEQ applies the EQ predicate on the "text_en" field.
func TextEnEQ(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldTextEn, v))
}

// TextEnNEQ applies the NEQ predicate on the "text_en" field.
func TextEnNEQ(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldNEQ(FieldTextEn, v))
}

// TextEnIn applies the In predicate on the "text_en" field.
func TextEnIn(vs ...string) predicate.Phrase {
	return predicate.Phrase(sql.FieldIn(FieldTextEn, vs...))
}

// TextEnNotIn applies the NotIn predicate on the "text_en" field.
func TextEnNotIn(vs ...string) predicate.Phrase {
	return predicate.Phrase(sql.FieldNotIn(FieldTextEn, vs...))
}

// TextEnGT applies the GT predicate on the "text_en" field.
func TextEnGT(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldGT(FieldTextEn, v))
}

// TextEnGTE applies the GTE predicate on the "text_en" field.
func TextEnGTE(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldGTE(FieldTextEn, v))
}

// TextEnLT applies the LT predicate on the "text_en" field.
func TextEnLT(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldLT(FieldTextEn, v))
}

// TextEnLTE applies the LTE predicate on the "text_en" field.
func TextEnLTE(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldLTE(FieldTextEn, v))
}

// TextEnContains applies the Contains predicate on the "text_en" field.
func TextEnContains(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldContains(FieldTextEn, v))
}

// TextEnHasPrefix applies the HasPrefix predicate on the "text_en" field.
func TextEnHasPrefix(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldHasPrefix(FieldTextEn, v))
}

// TextEnHasSuffix applies the HasSuffix predicate on the "text_en" field.
func TextEnHasSuffix(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldHasSuffix(FieldTextEn, v))
}

// TextEnEqualFold applies the EqualFold predicate on the "text_en" field.
func TextEnEqualFold(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEqualFold(FieldTextEn, v))
}

// TextEnContainsFold applies the ContainsFold predicate on the "text_en" field.
func TextEnContainsFold(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldContainsFold(FieldTextEn, v))
}

// TextJpEQ applies the EQ predicate on the "text_jp" field.
func TextJpEQ(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldTextJp, v))
}

// TextJpNEQ applies the NEQ predicate on the "text_jp" field.
func TextJpNEQ(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldNEQ(FieldTextJp, v))
}

// TextJpIn applies the In predicate on the "text_jp" field.
func TextJpIn(vs ...string) predicate.Phrase {
	return predicate.Phrase(sql.FieldIn(FieldTextJp, vs...))
}

// TextJpNotIn applies the NotIn predicate on the "text_jp" field.
func TextJpNotIn(vs ...string) predicate.Phrase {
	return predicate.Phrase(sql.FieldNotIn(FieldTextJp, vs...))
}

// TextJpGT applies the GT predicate on the "text_jp" field.
func TextJpGT(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldGT(FieldTextJp, v))
}

// TextJpGTE applies the GTE predicate on the "text_jp" field.
func TextJpGTE(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldGTE(FieldTextJp, v))
}

// TextJpLT applies the LT predicate on the "text_jp" field.
func TextJpLT(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldLT(FieldTextJp, v))
}

// TextJpLTE applies the LTE predicate on the "text_jp" field.
func TextJpLTE(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldLTE(FieldTextJp, v))
}

// TextJpContains applies the Contains predicate on the "text_jp" field.
func TextJpContains(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldContains(FieldTextJp, v))
}

// TextJpHasPrefix applies the HasPrefix predicate on the "text_jp" field.
func TextJpHasPrefix(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldHasPrefix(FieldTextJp, v))
}

// TextJpHasSuffix applies the HasSuffix predicate on the "text_jp" field.
func TextJpHasSuffix(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldHasSuffix(FieldTextJp, v))
}

// TextJpEqualFold applies the EqualFold predicate on the "text_jp" field.
func TextJpEqualFold(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldEqualFold(FieldTextJp, v))
}

// TextJpContainsFold applies the ContainsFold predicate on the "text_jp" field.
func TextJpContainsFold(v string) predicate.Phrase {
	return predicate.Phrase(sql.FieldContainsFold(FieldTextJp, v))
}

// ChapterIDEQ applies the EQ predicate on the "chapter_id" field.
func ChapterIDEQ(v int32) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldChapterID, v))
}

// ChapterIDNEQ applies the NEQ predicate on the "chapter_id" field.
func ChapterIDNEQ(v int32) predicate.Phrase {
	return predicate.Phrase(sql.FieldNEQ(FieldChapterID, v))
}

// ChapterIDIn applies the In predicate on the "chapter_id" field.
func ChapterIDIn(vs ...int32) predicate.Phrase {
	return predicate.Phrase(sql.FieldIn(FieldChapterID, vs...))
}

// ChapterIDNotIn applies the NotIn predicate on the "chapter_id" field.
func ChapterIDNotIn(vs ...int32) predicate.Phrase {
	return predicate.Phrase(sql.FieldNotIn(FieldChapterID, vs...))
}

// ChangeLineEQ applies the EQ predicate on the "change_line" field.
func ChangeLineEQ(v bool) predicate.Phrase {
	return predicate.Phrase(sql.FieldEQ(FieldChangeLine, v))
}

// ChangeLineNEQ applies the NEQ predicate on the "change_line" field.
func ChangeLineNEQ(v bool) predicate.Phrase {
	return predicate.Phrase(sql.FieldNEQ(FieldChangeLine, v))
}

// HasPhraseChapter applies the HasEdge predicate on the "phrase_chapter" edge.
func HasPhraseChapter() predicate.Phrase {
	return predicate.Phrase(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PhraseChapterTable, PhraseChapterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhraseChapterWith applies the HasEdge predicate on the "phrase_chapter" edge with a given conditions (other predicates).
func HasPhraseChapterWith(preds ...predicate.Chapter) predicate.Phrase {
	return predicate.Phrase(func(s *sql.Selector) {
		step := newPhraseChapterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Phrase) predicate.Phrase {
	return predicate.Phrase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Phrase) predicate.Phrase {
	return predicate.Phrase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Phrase) predicate.Phrase {
	return predicate.Phrase(sql.NotPredicates(p))
}
