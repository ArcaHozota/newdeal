// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"newdeal/ent/role"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Role is the model entity for the Role schema.
type Role struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int64 `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 論理削除フラグ
	VisibleFlg bool `json:"visible_flg,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleQuery when eager-loading is set.
	Edges        RoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleEdges holds the relations/edges for other nodes in the graph.
type RoleEdges struct {
	// Student holds the value of the student edge.
	Student []*Student `json:"student,omitempty"`
	// Auths holds the value of the auths edge.
	Auths []*Auth `json:"auths,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) StudentOrErr() ([]*Student, error) {
	if e.loadedTypes[0] {
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// AuthsOrErr returns the Auths value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) AuthsOrErr() ([]*Auth, error) {
	if e.loadedTypes[1] {
		return e.Auths, nil
	}
	return nil, &NotLoadedError{edge: "auths"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case role.FieldVisibleFlg:
			values[i] = new(sql.NullBool)
		case role.FieldID:
			values[i] = new(sql.NullInt64)
		case role.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Role fields.
func (r *Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case role.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case role.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case role.FieldVisibleFlg:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible_flg", values[i])
			} else if value.Valid {
				r.VisibleFlg = value.Bool
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Role.
// This includes values selected through modifiers, order, etc.
func (r *Role) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryStudent queries the "student" edge of the Role entity.
func (r *Role) QueryStudent() *StudentQuery {
	return NewRoleClient(r.config).QueryStudent(r)
}

// QueryAuths queries the "auths" edge of the Role entity.
func (r *Role) QueryAuths() *AuthQuery {
	return NewRoleClient(r.config).QueryAuths(r)
}

// Update returns a builder for updating this Role.
// Note that you need to call Role.Unwrap() before calling this method if this Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Role) Update() *RoleUpdateOne {
	return NewRoleClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Role) Unwrap() *Role {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Role is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Role) String() string {
	var builder strings.Builder
	builder.WriteString("Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("visible_flg=")
	builder.WriteString(fmt.Sprintf("%v", r.VisibleFlg))
	builder.WriteByte(')')
	return builder.String()
}

// Roles is a parsable slice of Role.
type Roles []*Role
