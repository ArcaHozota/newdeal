// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newdeal/ent/auth"
	"newdeal/ent/predicate"
	"newdeal/ent/role"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthUpdate is the builder for updating Auth entities.
type AuthUpdate struct {
	config
	hooks    []Hook
	mutation *AuthMutation
}

// Where appends a list predicates to the AuthUpdate builder.
func (au *AuthUpdate) Where(ps ...predicate.Auth) *AuthUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AuthUpdate) SetName(s string) *AuthUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AuthUpdate) SetNillableName(s *string) *AuthUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetTitle sets the "title" field.
func (au *AuthUpdate) SetTitle(s string) *AuthUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AuthUpdate) SetNillableTitle(s *string) *AuthUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetCategoryID sets the "category_id" field.
func (au *AuthUpdate) SetCategoryID(i int64) *AuthUpdate {
	au.mutation.ResetCategoryID()
	au.mutation.SetCategoryID(i)
	return au
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (au *AuthUpdate) SetNillableCategoryID(i *int64) *AuthUpdate {
	if i != nil {
		au.SetCategoryID(*i)
	}
	return au
}

// AddCategoryID adds i to the "category_id" field.
func (au *AuthUpdate) AddCategoryID(i int64) *AuthUpdate {
	au.mutation.AddCategoryID(i)
	return au
}

// ClearCategoryID clears the value of the "category_id" field.
func (au *AuthUpdate) ClearCategoryID() *AuthUpdate {
	au.mutation.ClearCategoryID()
	return au
}

// AddToRoleIDs adds the "to_roles" edge to the Role entity by IDs.
func (au *AuthUpdate) AddToRoleIDs(ids ...int64) *AuthUpdate {
	au.mutation.AddToRoleIDs(ids...)
	return au
}

// AddToRoles adds the "to_roles" edges to the Role entity.
func (au *AuthUpdate) AddToRoles(r ...*Role) *AuthUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddToRoleIDs(ids...)
}

// Mutation returns the AuthMutation object of the builder.
func (au *AuthUpdate) Mutation() *AuthMutation {
	return au.mutation
}

// ClearToRoles clears all "to_roles" edges to the Role entity.
func (au *AuthUpdate) ClearToRoles() *AuthUpdate {
	au.mutation.ClearToRoles()
	return au
}

// RemoveToRoleIDs removes the "to_roles" edge to Role entities by IDs.
func (au *AuthUpdate) RemoveToRoleIDs(ids ...int64) *AuthUpdate {
	au.mutation.RemoveToRoleIDs(ids...)
	return au
}

// RemoveToRoles removes "to_roles" edges to Role entities.
func (au *AuthUpdate) RemoveToRoles(r ...*Role) *AuthUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveToRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(auth.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(auth.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.CategoryID(); ok {
		_spec.SetField(auth.FieldCategoryID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedCategoryID(); ok {
		_spec.AddField(auth.FieldCategoryID, field.TypeInt64, value)
	}
	if au.mutation.CategoryIDCleared() {
		_spec.ClearField(auth.FieldCategoryID, field.TypeInt64)
	}
	if au.mutation.ToRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auth.ToRolesTable,
			Columns: auth.ToRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedToRolesIDs(); len(nodes) > 0 && !au.mutation.ToRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auth.ToRolesTable,
			Columns: auth.ToRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ToRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auth.ToRolesTable,
			Columns: auth.ToRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthUpdateOne is the builder for updating a single Auth entity.
type AuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthMutation
}

// SetName sets the "name" field.
func (auo *AuthUpdateOne) SetName(s string) *AuthUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableName(s *string) *AuthUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetTitle sets the "title" field.
func (auo *AuthUpdateOne) SetTitle(s string) *AuthUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableTitle(s *string) *AuthUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetCategoryID sets the "category_id" field.
func (auo *AuthUpdateOne) SetCategoryID(i int64) *AuthUpdateOne {
	auo.mutation.ResetCategoryID()
	auo.mutation.SetCategoryID(i)
	return auo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (auo *AuthUpdateOne) SetNillableCategoryID(i *int64) *AuthUpdateOne {
	if i != nil {
		auo.SetCategoryID(*i)
	}
	return auo
}

// AddCategoryID adds i to the "category_id" field.
func (auo *AuthUpdateOne) AddCategoryID(i int64) *AuthUpdateOne {
	auo.mutation.AddCategoryID(i)
	return auo
}

// ClearCategoryID clears the value of the "category_id" field.
func (auo *AuthUpdateOne) ClearCategoryID() *AuthUpdateOne {
	auo.mutation.ClearCategoryID()
	return auo
}

// AddToRoleIDs adds the "to_roles" edge to the Role entity by IDs.
func (auo *AuthUpdateOne) AddToRoleIDs(ids ...int64) *AuthUpdateOne {
	auo.mutation.AddToRoleIDs(ids...)
	return auo
}

// AddToRoles adds the "to_roles" edges to the Role entity.
func (auo *AuthUpdateOne) AddToRoles(r ...*Role) *AuthUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddToRoleIDs(ids...)
}

// Mutation returns the AuthMutation object of the builder.
func (auo *AuthUpdateOne) Mutation() *AuthMutation {
	return auo.mutation
}

// ClearToRoles clears all "to_roles" edges to the Role entity.
func (auo *AuthUpdateOne) ClearToRoles() *AuthUpdateOne {
	auo.mutation.ClearToRoles()
	return auo
}

// RemoveToRoleIDs removes the "to_roles" edge to Role entities by IDs.
func (auo *AuthUpdateOne) RemoveToRoleIDs(ids ...int64) *AuthUpdateOne {
	auo.mutation.RemoveToRoleIDs(ids...)
	return auo
}

// RemoveToRoles removes "to_roles" edges to Role entities.
func (auo *AuthUpdateOne) RemoveToRoles(r ...*Role) *AuthUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveToRoleIDs(ids...)
}

// Where appends a list predicates to the AuthUpdate builder.
func (auo *AuthUpdateOne) Where(ps ...predicate.Auth) *AuthUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthUpdateOne) Select(field string, fields ...string) *AuthUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Auth entity.
func (auo *AuthUpdateOne) Save(ctx context.Context) (*Auth, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthUpdateOne) SaveX(ctx context.Context) *Auth {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AuthUpdateOne) sqlSave(ctx context.Context) (_node *Auth, err error) {
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Auth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auth.FieldID)
		for _, f := range fields {
			if !auth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(auth.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(auth.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.CategoryID(); ok {
		_spec.SetField(auth.FieldCategoryID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedCategoryID(); ok {
		_spec.AddField(auth.FieldCategoryID, field.TypeInt64, value)
	}
	if auo.mutation.CategoryIDCleared() {
		_spec.ClearField(auth.FieldCategoryID, field.TypeInt64)
	}
	if auo.mutation.ToRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auth.ToRolesTable,
			Columns: auth.ToRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedToRolesIDs(); len(nodes) > 0 && !auo.mutation.ToRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auth.ToRolesTable,
			Columns: auth.ToRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ToRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auth.ToRolesTable,
			Columns: auth.ToRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Auth{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
