// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newdeal/ent/hymn"
	"newdeal/ent/hymnswork"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HymnsWorkCreate is the builder for creating a HymnsWork entity.
type HymnsWorkCreate struct {
	config
	mutation *HymnsWorkMutation
	hooks    []Hook
}

// SetWorkID sets the "work_id" field.
func (hwc *HymnsWorkCreate) SetWorkID(i int64) *HymnsWorkCreate {
	hwc.mutation.SetWorkID(i)
	return hwc
}

// SetScore sets the "score" field.
func (hwc *HymnsWorkCreate) SetScore(b []byte) *HymnsWorkCreate {
	hwc.mutation.SetScore(b)
	return hwc
}

// SetNameJpRational sets the "name_jp_rational" field.
func (hwc *HymnsWorkCreate) SetNameJpRational(s string) *HymnsWorkCreate {
	hwc.mutation.SetNameJpRational(s)
	return hwc
}

// SetNillableNameJpRational sets the "name_jp_rational" field if the given value is not nil.
func (hwc *HymnsWorkCreate) SetNillableNameJpRational(s *string) *HymnsWorkCreate {
	if s != nil {
		hwc.SetNameJpRational(*s)
	}
	return hwc
}

// SetUpdatedTime sets the "updated_time" field.
func (hwc *HymnsWorkCreate) SetUpdatedTime(t time.Time) *HymnsWorkCreate {
	hwc.mutation.SetUpdatedTime(t)
	return hwc
}

// SetBiko sets the "biko" field.
func (hwc *HymnsWorkCreate) SetBiko(s string) *HymnsWorkCreate {
	hwc.mutation.SetBiko(s)
	return hwc
}

// SetNillableBiko sets the "biko" field if the given value is not nil.
func (hwc *HymnsWorkCreate) SetNillableBiko(s *string) *HymnsWorkCreate {
	if s != nil {
		hwc.SetBiko(*s)
	}
	return hwc
}

// SetID sets the "id" field.
func (hwc *HymnsWorkCreate) SetID(i int64) *HymnsWorkCreate {
	hwc.mutation.SetID(i)
	return hwc
}

// SetLinkedHymnID sets the "linked_hymn" edge to the Hymn entity by ID.
func (hwc *HymnsWorkCreate) SetLinkedHymnID(id int64) *HymnsWorkCreate {
	hwc.mutation.SetLinkedHymnID(id)
	return hwc
}

// SetLinkedHymn sets the "linked_hymn" edge to the Hymn entity.
func (hwc *HymnsWorkCreate) SetLinkedHymn(h *Hymn) *HymnsWorkCreate {
	return hwc.SetLinkedHymnID(h.ID)
}

// Mutation returns the HymnsWorkMutation object of the builder.
func (hwc *HymnsWorkCreate) Mutation() *HymnsWorkMutation {
	return hwc.mutation
}

// Save creates the HymnsWork in the database.
func (hwc *HymnsWorkCreate) Save(ctx context.Context) (*HymnsWork, error) {
	return withHooks(ctx, hwc.sqlSave, hwc.mutation, hwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hwc *HymnsWorkCreate) SaveX(ctx context.Context) *HymnsWork {
	v, err := hwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hwc *HymnsWorkCreate) Exec(ctx context.Context) error {
	_, err := hwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hwc *HymnsWorkCreate) ExecX(ctx context.Context) {
	if err := hwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hwc *HymnsWorkCreate) check() error {
	if _, ok := hwc.mutation.WorkID(); !ok {
		return &ValidationError{Name: "work_id", err: errors.New(`ent: missing required field "HymnsWork.work_id"`)}
	}
	if _, ok := hwc.mutation.UpdatedTime(); !ok {
		return &ValidationError{Name: "updated_time", err: errors.New(`ent: missing required field "HymnsWork.updated_time"`)}
	}
	if len(hwc.mutation.LinkedHymnIDs()) == 0 {
		return &ValidationError{Name: "linked_hymn", err: errors.New(`ent: missing required edge "HymnsWork.linked_hymn"`)}
	}
	return nil
}

func (hwc *HymnsWorkCreate) sqlSave(ctx context.Context) (*HymnsWork, error) {
	if err := hwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	hwc.mutation.id = &_node.ID
	hwc.mutation.done = true
	return _node, nil
}

func (hwc *HymnsWorkCreate) createSpec() (*HymnsWork, *sqlgraph.CreateSpec) {
	var (
		_node = &HymnsWork{config: hwc.config}
		_spec = sqlgraph.NewCreateSpec(hymnswork.Table, sqlgraph.NewFieldSpec(hymnswork.FieldID, field.TypeInt64))
	)
	if id, ok := hwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hwc.mutation.Score(); ok {
		_spec.SetField(hymnswork.FieldScore, field.TypeBytes, value)
		_node.Score = value
	}
	if value, ok := hwc.mutation.NameJpRational(); ok {
		_spec.SetField(hymnswork.FieldNameJpRational, field.TypeString, value)
		_node.NameJpRational = value
	}
	if value, ok := hwc.mutation.UpdatedTime(); ok {
		_spec.SetField(hymnswork.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if value, ok := hwc.mutation.Biko(); ok {
		_spec.SetField(hymnswork.FieldBiko, field.TypeString, value)
		_node.Biko = value
	}
	if nodes := hwc.mutation.LinkedHymnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hymnswork.LinkedHymnTable,
			Columns: []string{hymnswork.LinkedHymnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymn.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HymnsWorkCreateBulk is the builder for creating many HymnsWork entities in bulk.
type HymnsWorkCreateBulk struct {
	config
	err      error
	builders []*HymnsWorkCreate
}

// Save creates the HymnsWork entities in the database.
func (hwcb *HymnsWorkCreateBulk) Save(ctx context.Context) ([]*HymnsWork, error) {
	if hwcb.err != nil {
		return nil, hwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hwcb.builders))
	nodes := make([]*HymnsWork, len(hwcb.builders))
	mutators := make([]Mutator, len(hwcb.builders))
	for i := range hwcb.builders {
		func(i int, root context.Context) {
			builder := hwcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HymnsWorkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hwcb *HymnsWorkCreateBulk) SaveX(ctx context.Context) []*HymnsWork {
	v, err := hwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hwcb *HymnsWorkCreateBulk) Exec(ctx context.Context) error {
	_, err := hwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hwcb *HymnsWorkCreateBulk) ExecX(ctx context.Context) {
	if err := hwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
