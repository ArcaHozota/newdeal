// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"newdeal/ent/hymn"
	"newdeal/ent/hymnswork"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HymnsWork is the model entity for the HymnsWork schema.
type HymnsWork struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Score holds the value of the "score" field.
	Score *[]byte `json:"score,omitempty"`
	// NameJpRational holds the value of the "name_jp_rational" field.
	NameJpRational *string `json:"name_jp_rational,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Biko holds the value of the "biko" field.
	Biko *string `json:"biko,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HymnsWorkQuery when eager-loading is set.
	Edges           HymnsWorkEdges `json:"edges"`
	hymn_hymns_work *int64
	selectValues    sql.SelectValues
}

// HymnsWorkEdges holds the relations/edges for other nodes in the graph.
type HymnsWorkEdges struct {
	// Hymns holds the value of the hymns edge.
	Hymns *Hymn `json:"hymns,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HymnsOrErr returns the Hymns value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HymnsWorkEdges) HymnsOrErr() (*Hymn, error) {
	if e.Hymns != nil {
		return e.Hymns, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: hymn.Label}
	}
	return nil, &NotLoadedError{edge: "hymns"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HymnsWork) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hymnswork.FieldScore:
			values[i] = new([]byte)
		case hymnswork.FieldID:
			values[i] = new(sql.NullInt64)
		case hymnswork.FieldNameJpRational, hymnswork.FieldBiko:
			values[i] = new(sql.NullString)
		case hymnswork.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		case hymnswork.ForeignKeys[0]: // hymn_hymns_work
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HymnsWork fields.
func (hw *HymnsWork) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hymnswork.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hw.ID = int64(value.Int64)
		case hymnswork.FieldScore:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value != nil {
				hw.Score = value
			}
		case hymnswork.FieldNameJpRational:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_jp_rational", values[i])
			} else if value.Valid {
				hw.NameJpRational = new(string)
				*hw.NameJpRational = value.String
			}
		case hymnswork.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				hw.UpdatedTime = value.Time
			}
		case hymnswork.FieldBiko:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biko", values[i])
			} else if value.Valid {
				hw.Biko = new(string)
				*hw.Biko = value.String
			}
		case hymnswork.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hymn_hymns_work", value)
			} else if value.Valid {
				hw.hymn_hymns_work = new(int64)
				*hw.hymn_hymns_work = int64(value.Int64)
			}
		default:
			hw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HymnsWork.
// This includes values selected through modifiers, order, etc.
func (hw *HymnsWork) Value(name string) (ent.Value, error) {
	return hw.selectValues.Get(name)
}

// QueryHymns queries the "hymns" edge of the HymnsWork entity.
func (hw *HymnsWork) QueryHymns() *HymnQuery {
	return NewHymnsWorkClient(hw.config).QueryHymns(hw)
}

// Update returns a builder for updating this HymnsWork.
// Note that you need to call HymnsWork.Unwrap() before calling this method if this HymnsWork
// was returned from a transaction, and the transaction was committed or rolled back.
func (hw *HymnsWork) Update() *HymnsWorkUpdateOne {
	return NewHymnsWorkClient(hw.config).UpdateOne(hw)
}

// Unwrap unwraps the HymnsWork entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hw *HymnsWork) Unwrap() *HymnsWork {
	_tx, ok := hw.config.driver.(*txDriver)
	if !ok {
		panic("ent: HymnsWork is not a transactional entity")
	}
	hw.config.driver = _tx.drv
	return hw
}

// String implements the fmt.Stringer.
func (hw *HymnsWork) String() string {
	var builder strings.Builder
	builder.WriteString("HymnsWork(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hw.ID))
	if v := hw.Score; v != nil {
		builder.WriteString("score=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hw.NameJpRational; v != nil {
		builder.WriteString("name_jp_rational=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(hw.UpdatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := hw.Biko; v != nil {
		builder.WriteString("biko=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// HymnsWorks is a parsable slice of HymnsWork.
type HymnsWorks []*HymnsWork
