// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"newdeal/ent/chapter"
	"newdeal/ent/phrase"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Phrase is the model entity for the Phrase schema.
type Phrase struct {
	config `json:"-"`
	// ID of the ent.
	// 節ID
	ID int64 `json:"id,omitempty"`
	// 節名称
	Name string `json:"name,omitempty"`
	// 内容
	TextEn string `json:"text_en,omitempty"`
	// 日本語内容
	TextJp string `json:"text_jp,omitempty"`
	// 章節ID
	ChapterID int32 `json:"chapter_id,omitempty"`
	// 改行フラグ
	ChangeLine bool `json:"change_line,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhraseQuery when eager-loading is set.
	Edges        PhraseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PhraseEdges holds the relations/edges for other nodes in the graph.
type PhraseEdges struct {
	// PhraseChapter holds the value of the phrase_chapter edge.
	PhraseChapter *Chapter `json:"phrase_chapter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PhraseChapterOrErr returns the PhraseChapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PhraseEdges) PhraseChapterOrErr() (*Chapter, error) {
	if e.PhraseChapter != nil {
		return e.PhraseChapter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chapter.Label}
	}
	return nil, &NotLoadedError{edge: "phrase_chapter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Phrase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case phrase.FieldChangeLine:
			values[i] = new(sql.NullBool)
		case phrase.FieldID, phrase.FieldChapterID:
			values[i] = new(sql.NullInt64)
		case phrase.FieldName, phrase.FieldTextEn, phrase.FieldTextJp:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Phrase fields.
func (ph *Phrase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case phrase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ph.ID = int64(value.Int64)
		case phrase.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ph.Name = value.String
			}
		case phrase.FieldTextEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_en", values[i])
			} else if value.Valid {
				ph.TextEn = value.String
			}
		case phrase.FieldTextJp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_jp", values[i])
			} else if value.Valid {
				ph.TextJp = value.String
			}
		case phrase.FieldChapterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chapter_id", values[i])
			} else if value.Valid {
				ph.ChapterID = int32(value.Int64)
			}
		case phrase.FieldChangeLine:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field change_line", values[i])
			} else if value.Valid {
				ph.ChangeLine = value.Bool
			}
		default:
			ph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Phrase.
// This includes values selected through modifiers, order, etc.
func (ph *Phrase) Value(name string) (ent.Value, error) {
	return ph.selectValues.Get(name)
}

// QueryPhraseChapter queries the "phrase_chapter" edge of the Phrase entity.
func (ph *Phrase) QueryPhraseChapter() *ChapterQuery {
	return NewPhraseClient(ph.config).QueryPhraseChapter(ph)
}

// Update returns a builder for updating this Phrase.
// Note that you need to call Phrase.Unwrap() before calling this method if this Phrase
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *Phrase) Update() *PhraseUpdateOne {
	return NewPhraseClient(ph.config).UpdateOne(ph)
}

// Unwrap unwraps the Phrase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ph *Phrase) Unwrap() *Phrase {
	_tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: Phrase is not a transactional entity")
	}
	ph.config.driver = _tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *Phrase) String() string {
	var builder strings.Builder
	builder.WriteString("Phrase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ph.ID))
	builder.WriteString("name=")
	builder.WriteString(ph.Name)
	builder.WriteString(", ")
	builder.WriteString("text_en=")
	builder.WriteString(ph.TextEn)
	builder.WriteString(", ")
	builder.WriteString("text_jp=")
	builder.WriteString(ph.TextJp)
	builder.WriteString(", ")
	builder.WriteString("chapter_id=")
	builder.WriteString(fmt.Sprintf("%v", ph.ChapterID))
	builder.WriteString(", ")
	builder.WriteString("change_line=")
	builder.WriteString(fmt.Sprintf("%v", ph.ChangeLine))
	builder.WriteByte(')')
	return builder.String()
}

// Phrases is a parsable slice of Phrase.
type Phrases []*Phrase
