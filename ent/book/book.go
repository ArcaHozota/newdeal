// Code generated by ent, DO NOT EDIT.

package book

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNameJp holds the string denoting the name_jp field in the database.
	FieldNameJp = "name_jp"
	// EdgeToChapter holds the string denoting the to_chapter edge name in mutations.
	EdgeToChapter = "to_chapter"
	// Table holds the table name of the book in the database.
	Table = "books"
	// ToChapterTable is the table that holds the to_chapter relation/edge.
	ToChapterTable = "chapters"
	// ToChapterInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	ToChapterInverseTable = "chapters"
	// ToChapterColumn is the table column denoting the to_chapter relation/edge.
	ToChapterColumn = "book_id"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNameJp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Book queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNameJp orders the results by the name_jp field.
func ByNameJp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameJp, opts...).ToFunc()
}

// ByToChapterCount orders the results by to_chapter count.
func ByToChapterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToChapterStep(), opts...)
	}
}

// ByToChapter orders the results by to_chapter terms.
func ByToChapter(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToChapterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newToChapterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToChapterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ToChapterTable, ToChapterColumn),
	)
}
