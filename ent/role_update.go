// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newdeal/ent/auth"
	"newdeal/ent/predicate"
	"newdeal/ent/role"
	"newdeal/ent/student"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetVisibleFlg sets the "visible_flg" field.
func (ru *RoleUpdate) SetVisibleFlg(b bool) *RoleUpdate {
	ru.mutation.SetVisibleFlg(b)
	return ru
}

// SetNillableVisibleFlg sets the "visible_flg" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableVisibleFlg(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetVisibleFlg(*b)
	}
	return ru
}

// AddRoledIDs adds the "roled" edge to the Student entity by IDs.
func (ru *RoleUpdate) AddRoledIDs(ids ...int64) *RoleUpdate {
	ru.mutation.AddRoledIDs(ids...)
	return ru
}

// AddRoled adds the "roled" edges to the Student entity.
func (ru *RoleUpdate) AddRoled(s ...*Student) *RoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddRoledIDs(ids...)
}

// AddAuthIDs adds the "auth" edge to the Auth entity by IDs.
func (ru *RoleUpdate) AddAuthIDs(ids ...int64) *RoleUpdate {
	ru.mutation.AddAuthIDs(ids...)
	return ru
}

// AddAuth adds the "auth" edges to the Auth entity.
func (ru *RoleUpdate) AddAuth(a ...*Auth) *RoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAuthIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// ClearRoled clears all "roled" edges to the Student entity.
func (ru *RoleUpdate) ClearRoled() *RoleUpdate {
	ru.mutation.ClearRoled()
	return ru
}

// RemoveRoledIDs removes the "roled" edge to Student entities by IDs.
func (ru *RoleUpdate) RemoveRoledIDs(ids ...int64) *RoleUpdate {
	ru.mutation.RemoveRoledIDs(ids...)
	return ru
}

// RemoveRoled removes "roled" edges to Student entities.
func (ru *RoleUpdate) RemoveRoled(s ...*Student) *RoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveRoledIDs(ids...)
}

// ClearAuth clears all "auth" edges to the Auth entity.
func (ru *RoleUpdate) ClearAuth() *RoleUpdate {
	ru.mutation.ClearAuth()
	return ru
}

// RemoveAuthIDs removes the "auth" edge to Auth entities by IDs.
func (ru *RoleUpdate) RemoveAuthIDs(ids ...int64) *RoleUpdate {
	ru.mutation.RemoveAuthIDs(ids...)
	return ru
}

// RemoveAuth removes "auth" edges to Auth entities.
func (ru *RoleUpdate) RemoveAuth(a ...*Auth) *RoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAuthIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.VisibleFlg(); ok {
		_spec.SetField(role.FieldVisibleFlg, field.TypeBool, value)
	}
	if ru.mutation.RoledCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoledTable,
			Columns: []string{role.RoledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRoledIDs(); len(nodes) > 0 && !ru.mutation.RoledCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoledTable,
			Columns: []string{role.RoledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoledIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoledTable,
			Columns: []string{role.RoledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.AuthTable,
			Columns: role.AuthPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAuthIDs(); len(nodes) > 0 && !ru.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.AuthTable,
			Columns: role.AuthPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.AuthTable,
			Columns: role.AuthPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetVisibleFlg sets the "visible_flg" field.
func (ruo *RoleUpdateOne) SetVisibleFlg(b bool) *RoleUpdateOne {
	ruo.mutation.SetVisibleFlg(b)
	return ruo
}

// SetNillableVisibleFlg sets the "visible_flg" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableVisibleFlg(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetVisibleFlg(*b)
	}
	return ruo
}

// AddRoledIDs adds the "roled" edge to the Student entity by IDs.
func (ruo *RoleUpdateOne) AddRoledIDs(ids ...int64) *RoleUpdateOne {
	ruo.mutation.AddRoledIDs(ids...)
	return ruo
}

// AddRoled adds the "roled" edges to the Student entity.
func (ruo *RoleUpdateOne) AddRoled(s ...*Student) *RoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddRoledIDs(ids...)
}

// AddAuthIDs adds the "auth" edge to the Auth entity by IDs.
func (ruo *RoleUpdateOne) AddAuthIDs(ids ...int64) *RoleUpdateOne {
	ruo.mutation.AddAuthIDs(ids...)
	return ruo
}

// AddAuth adds the "auth" edges to the Auth entity.
func (ruo *RoleUpdateOne) AddAuth(a ...*Auth) *RoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAuthIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// ClearRoled clears all "roled" edges to the Student entity.
func (ruo *RoleUpdateOne) ClearRoled() *RoleUpdateOne {
	ruo.mutation.ClearRoled()
	return ruo
}

// RemoveRoledIDs removes the "roled" edge to Student entities by IDs.
func (ruo *RoleUpdateOne) RemoveRoledIDs(ids ...int64) *RoleUpdateOne {
	ruo.mutation.RemoveRoledIDs(ids...)
	return ruo
}

// RemoveRoled removes "roled" edges to Student entities.
func (ruo *RoleUpdateOne) RemoveRoled(s ...*Student) *RoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveRoledIDs(ids...)
}

// ClearAuth clears all "auth" edges to the Auth entity.
func (ruo *RoleUpdateOne) ClearAuth() *RoleUpdateOne {
	ruo.mutation.ClearAuth()
	return ruo
}

// RemoveAuthIDs removes the "auth" edge to Auth entities by IDs.
func (ruo *RoleUpdateOne) RemoveAuthIDs(ids ...int64) *RoleUpdateOne {
	ruo.mutation.RemoveAuthIDs(ids...)
	return ruo
}

// RemoveAuth removes "auth" edges to Auth entities.
func (ruo *RoleUpdateOne) RemoveAuth(a ...*Auth) *RoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAuthIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.VisibleFlg(); ok {
		_spec.SetField(role.FieldVisibleFlg, field.TypeBool, value)
	}
	if ruo.mutation.RoledCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoledTable,
			Columns: []string{role.RoledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRoledIDs(); len(nodes) > 0 && !ruo.mutation.RoledCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoledTable,
			Columns: []string{role.RoledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoledIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoledTable,
			Columns: []string{role.RoledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.AuthTable,
			Columns: role.AuthPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAuthIDs(); len(nodes) > 0 && !ruo.mutation.AuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.AuthTable,
			Columns: role.AuthPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.AuthTable,
			Columns: role.AuthPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
