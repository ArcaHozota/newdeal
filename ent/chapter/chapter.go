// Code generated by ent, DO NOT EDIT.

package chapter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chapter type in the database.
	Label = "chapter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNameJp holds the string denoting the name_jp field in the database.
	FieldNameJp = "name_jp"
	// FieldBookID holds the string denoting the book_id field in the database.
	FieldBookID = "book_id"
	// EdgeToPhrase holds the string denoting the to_phrase edge name in mutations.
	EdgeToPhrase = "to_phrase"
	// EdgeChapterBook holds the string denoting the chapter_book edge name in mutations.
	EdgeChapterBook = "chapter_book"
	// Table holds the table name of the chapter in the database.
	Table = "chapters"
	// ToPhraseTable is the table that holds the to_phrase relation/edge.
	ToPhraseTable = "phrases"
	// ToPhraseInverseTable is the table name for the Phrase entity.
	// It exists in this package in order to avoid circular dependency with the "phrase" package.
	ToPhraseInverseTable = "phrases"
	// ToPhraseColumn is the table column denoting the to_phrase relation/edge.
	ToPhraseColumn = "chapter_id"
	// ChapterBookTable is the table that holds the chapter_book relation/edge.
	ChapterBookTable = "chapters"
	// ChapterBookInverseTable is the table name for the Book entity.
	// It exists in this package in order to avoid circular dependency with the "book" package.
	ChapterBookInverseTable = "books"
	// ChapterBookColumn is the table column denoting the chapter_book relation/edge.
	ChapterBookColumn = "book_id"
)

// Columns holds all SQL columns for chapter fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNameJp,
	FieldBookID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Chapter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNameJp orders the results by the name_jp field.
func ByNameJp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameJp, opts...).ToFunc()
}

// ByBookID orders the results by the book_id field.
func ByBookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookID, opts...).ToFunc()
}

// ByToPhraseCount orders the results by to_phrase count.
func ByToPhraseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToPhraseStep(), opts...)
	}
}

// ByToPhrase orders the results by to_phrase terms.
func ByToPhrase(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToPhraseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChapterBookField orders the results by chapter_book field.
func ByChapterBookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChapterBookStep(), sql.OrderByField(field, opts...))
	}
}
func newToPhraseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToPhraseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ToPhraseTable, ToPhraseColumn),
	)
}
func newChapterBookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChapterBookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChapterBookTable, ChapterBookColumn),
	)
}
