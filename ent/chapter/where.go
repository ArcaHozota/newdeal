// Code generated by ent, DO NOT EDIT.

package chapter

import (
	"newdeal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldName, v))
}

// NameJp applies equality check predicate on the "name_jp" field. It's identical to NameJpEQ.
func NameJp(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldNameJp, v))
}

// BookID applies equality check predicate on the "book_id" field. It's identical to BookIDEQ.
func BookID(v int16) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldBookID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContainsFold(FieldName, v))
}

// NameJpEQ applies the EQ predicate on the "name_jp" field.
func NameJpEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldNameJp, v))
}

// NameJpNEQ applies the NEQ predicate on the "name_jp" field.
func NameJpNEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldNameJp, v))
}

// NameJpIn applies the In predicate on the "name_jp" field.
func NameJpIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldNameJp, vs...))
}

// NameJpNotIn applies the NotIn predicate on the "name_jp" field.
func NameJpNotIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldNameJp, vs...))
}

// NameJpGT applies the GT predicate on the "name_jp" field.
func NameJpGT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldNameJp, v))
}

// NameJpGTE applies the GTE predicate on the "name_jp" field.
func NameJpGTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldNameJp, v))
}

// NameJpLT applies the LT predicate on the "name_jp" field.
func NameJpLT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldNameJp, v))
}

// NameJpLTE applies the LTE predicate on the "name_jp" field.
func NameJpLTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldNameJp, v))
}

// NameJpContains applies the Contains predicate on the "name_jp" field.
func NameJpContains(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContains(FieldNameJp, v))
}

// NameJpHasPrefix applies the HasPrefix predicate on the "name_jp" field.
func NameJpHasPrefix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasPrefix(FieldNameJp, v))
}

// NameJpHasSuffix applies the HasSuffix predicate on the "name_jp" field.
func NameJpHasSuffix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasSuffix(FieldNameJp, v))
}

// NameJpEqualFold applies the EqualFold predicate on the "name_jp" field.
func NameJpEqualFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEqualFold(FieldNameJp, v))
}

// NameJpContainsFold applies the ContainsFold predicate on the "name_jp" field.
func NameJpContainsFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContainsFold(FieldNameJp, v))
}

// BookIDEQ applies the EQ predicate on the "book_id" field.
func BookIDEQ(v int16) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldBookID, v))
}

// BookIDNEQ applies the NEQ predicate on the "book_id" field.
func BookIDNEQ(v int16) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldBookID, v))
}

// BookIDIn applies the In predicate on the "book_id" field.
func BookIDIn(vs ...int16) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldBookID, vs...))
}

// BookIDNotIn applies the NotIn predicate on the "book_id" field.
func BookIDNotIn(vs ...int16) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldBookID, vs...))
}

// HasToPhrase applies the HasEdge predicate on the "to_phrase" edge.
func HasToPhrase() predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToPhraseTable, ToPhraseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToPhraseWith applies the HasEdge predicate on the "to_phrase" edge with a given conditions (other predicates).
func HasToPhraseWith(preds ...predicate.Phrase) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := newToPhraseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChapterBook applies the HasEdge predicate on the "chapter_book" edge.
func HasChapterBook() predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChapterBookTable, ChapterBookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChapterBookWith applies the HasEdge predicate on the "chapter_book" edge with a given conditions (other predicates).
func HasChapterBookWith(preds ...predicate.Book) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := newChapterBookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(sql.NotPredicates(p))
}
