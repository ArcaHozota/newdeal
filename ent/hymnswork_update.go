// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newdeal/ent/hymn"
	"newdeal/ent/hymnswork"
	"newdeal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HymnsWorkUpdate is the builder for updating HymnsWork entities.
type HymnsWorkUpdate struct {
	config
	hooks    []Hook
	mutation *HymnsWorkMutation
}

// Where appends a list predicates to the HymnsWorkUpdate builder.
func (hwu *HymnsWorkUpdate) Where(ps ...predicate.HymnsWork) *HymnsWorkUpdate {
	hwu.mutation.Where(ps...)
	return hwu
}

// SetWorkID sets the "work_id" field.
func (hwu *HymnsWorkUpdate) SetWorkID(u uuid.UUID) *HymnsWorkUpdate {
	hwu.mutation.SetWorkID(u)
	return hwu
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (hwu *HymnsWorkUpdate) SetNillableWorkID(u *uuid.UUID) *HymnsWorkUpdate {
	if u != nil {
		hwu.SetWorkID(*u)
	}
	return hwu
}

// SetScore sets the "score" field.
func (hwu *HymnsWorkUpdate) SetScore(b []byte) *HymnsWorkUpdate {
	hwu.mutation.SetScore(b)
	return hwu
}

// SetNameJpRational sets the "name_jp_rational" field.
func (hwu *HymnsWorkUpdate) SetNameJpRational(s string) *HymnsWorkUpdate {
	hwu.mutation.SetNameJpRational(s)
	return hwu
}

// SetNillableNameJpRational sets the "name_jp_rational" field if the given value is not nil.
func (hwu *HymnsWorkUpdate) SetNillableNameJpRational(s *string) *HymnsWorkUpdate {
	if s != nil {
		hwu.SetNameJpRational(*s)
	}
	return hwu
}

// SetUpdatedTime sets the "updated_time" field.
func (hwu *HymnsWorkUpdate) SetUpdatedTime(t time.Time) *HymnsWorkUpdate {
	hwu.mutation.SetUpdatedTime(t)
	return hwu
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (hwu *HymnsWorkUpdate) SetNillableUpdatedTime(t *time.Time) *HymnsWorkUpdate {
	if t != nil {
		hwu.SetUpdatedTime(*t)
	}
	return hwu
}

// SetBiko sets the "biko" field.
func (hwu *HymnsWorkUpdate) SetBiko(s string) *HymnsWorkUpdate {
	hwu.mutation.SetBiko(s)
	return hwu
}

// SetNillableBiko sets the "biko" field if the given value is not nil.
func (hwu *HymnsWorkUpdate) SetNillableBiko(s *string) *HymnsWorkUpdate {
	if s != nil {
		hwu.SetBiko(*s)
	}
	return hwu
}

// SetHymnsID sets the "hymns" edge to the Hymn entity by ID.
func (hwu *HymnsWorkUpdate) SetHymnsID(id uuid.UUID) *HymnsWorkUpdate {
	hwu.mutation.SetHymnsID(id)
	return hwu
}

// SetHymns sets the "hymns" edge to the Hymn entity.
func (hwu *HymnsWorkUpdate) SetHymns(h *Hymn) *HymnsWorkUpdate {
	return hwu.SetHymnsID(h.ID)
}

// Mutation returns the HymnsWorkMutation object of the builder.
func (hwu *HymnsWorkUpdate) Mutation() *HymnsWorkMutation {
	return hwu.mutation
}

// ClearHymns clears the "hymns" edge to the Hymn entity.
func (hwu *HymnsWorkUpdate) ClearHymns() *HymnsWorkUpdate {
	hwu.mutation.ClearHymns()
	return hwu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hwu *HymnsWorkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hwu.sqlSave, hwu.mutation, hwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hwu *HymnsWorkUpdate) SaveX(ctx context.Context) int {
	affected, err := hwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hwu *HymnsWorkUpdate) Exec(ctx context.Context) error {
	_, err := hwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hwu *HymnsWorkUpdate) ExecX(ctx context.Context) {
	if err := hwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hwu *HymnsWorkUpdate) check() error {
	if hwu.mutation.HymnsCleared() && len(hwu.mutation.HymnsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HymnsWork.hymns"`)
	}
	return nil
}

func (hwu *HymnsWorkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hwu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hymnswork.Table, hymnswork.Columns, sqlgraph.NewFieldSpec(hymnswork.FieldID, field.TypeInt))
	if ps := hwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hwu.mutation.WorkID(); ok {
		_spec.SetField(hymnswork.FieldWorkID, field.TypeUUID, value)
	}
	if value, ok := hwu.mutation.Score(); ok {
		_spec.SetField(hymnswork.FieldScore, field.TypeBytes, value)
	}
	if value, ok := hwu.mutation.NameJpRational(); ok {
		_spec.SetField(hymnswork.FieldNameJpRational, field.TypeString, value)
	}
	if value, ok := hwu.mutation.UpdatedTime(); ok {
		_spec.SetField(hymnswork.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := hwu.mutation.Biko(); ok {
		_spec.SetField(hymnswork.FieldBiko, field.TypeString, value)
	}
	if hwu.mutation.HymnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hymnswork.HymnsTable,
			Columns: []string{hymnswork.HymnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymn.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hwu.mutation.HymnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hymnswork.HymnsTable,
			Columns: []string{hymnswork.HymnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hymnswork.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hwu.mutation.done = true
	return n, nil
}

// HymnsWorkUpdateOne is the builder for updating a single HymnsWork entity.
type HymnsWorkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HymnsWorkMutation
}

// SetWorkID sets the "work_id" field.
func (hwuo *HymnsWorkUpdateOne) SetWorkID(u uuid.UUID) *HymnsWorkUpdateOne {
	hwuo.mutation.SetWorkID(u)
	return hwuo
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (hwuo *HymnsWorkUpdateOne) SetNillableWorkID(u *uuid.UUID) *HymnsWorkUpdateOne {
	if u != nil {
		hwuo.SetWorkID(*u)
	}
	return hwuo
}

// SetScore sets the "score" field.
func (hwuo *HymnsWorkUpdateOne) SetScore(b []byte) *HymnsWorkUpdateOne {
	hwuo.mutation.SetScore(b)
	return hwuo
}

// SetNameJpRational sets the "name_jp_rational" field.
func (hwuo *HymnsWorkUpdateOne) SetNameJpRational(s string) *HymnsWorkUpdateOne {
	hwuo.mutation.SetNameJpRational(s)
	return hwuo
}

// SetNillableNameJpRational sets the "name_jp_rational" field if the given value is not nil.
func (hwuo *HymnsWorkUpdateOne) SetNillableNameJpRational(s *string) *HymnsWorkUpdateOne {
	if s != nil {
		hwuo.SetNameJpRational(*s)
	}
	return hwuo
}

// SetUpdatedTime sets the "updated_time" field.
func (hwuo *HymnsWorkUpdateOne) SetUpdatedTime(t time.Time) *HymnsWorkUpdateOne {
	hwuo.mutation.SetUpdatedTime(t)
	return hwuo
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (hwuo *HymnsWorkUpdateOne) SetNillableUpdatedTime(t *time.Time) *HymnsWorkUpdateOne {
	if t != nil {
		hwuo.SetUpdatedTime(*t)
	}
	return hwuo
}

// SetBiko sets the "biko" field.
func (hwuo *HymnsWorkUpdateOne) SetBiko(s string) *HymnsWorkUpdateOne {
	hwuo.mutation.SetBiko(s)
	return hwuo
}

// SetNillableBiko sets the "biko" field if the given value is not nil.
func (hwuo *HymnsWorkUpdateOne) SetNillableBiko(s *string) *HymnsWorkUpdateOne {
	if s != nil {
		hwuo.SetBiko(*s)
	}
	return hwuo
}

// SetHymnsID sets the "hymns" edge to the Hymn entity by ID.
func (hwuo *HymnsWorkUpdateOne) SetHymnsID(id uuid.UUID) *HymnsWorkUpdateOne {
	hwuo.mutation.SetHymnsID(id)
	return hwuo
}

// SetHymns sets the "hymns" edge to the Hymn entity.
func (hwuo *HymnsWorkUpdateOne) SetHymns(h *Hymn) *HymnsWorkUpdateOne {
	return hwuo.SetHymnsID(h.ID)
}

// Mutation returns the HymnsWorkMutation object of the builder.
func (hwuo *HymnsWorkUpdateOne) Mutation() *HymnsWorkMutation {
	return hwuo.mutation
}

// ClearHymns clears the "hymns" edge to the Hymn entity.
func (hwuo *HymnsWorkUpdateOne) ClearHymns() *HymnsWorkUpdateOne {
	hwuo.mutation.ClearHymns()
	return hwuo
}

// Where appends a list predicates to the HymnsWorkUpdate builder.
func (hwuo *HymnsWorkUpdateOne) Where(ps ...predicate.HymnsWork) *HymnsWorkUpdateOne {
	hwuo.mutation.Where(ps...)
	return hwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hwuo *HymnsWorkUpdateOne) Select(field string, fields ...string) *HymnsWorkUpdateOne {
	hwuo.fields = append([]string{field}, fields...)
	return hwuo
}

// Save executes the query and returns the updated HymnsWork entity.
func (hwuo *HymnsWorkUpdateOne) Save(ctx context.Context) (*HymnsWork, error) {
	return withHooks(ctx, hwuo.sqlSave, hwuo.mutation, hwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hwuo *HymnsWorkUpdateOne) SaveX(ctx context.Context) *HymnsWork {
	node, err := hwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hwuo *HymnsWorkUpdateOne) Exec(ctx context.Context) error {
	_, err := hwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hwuo *HymnsWorkUpdateOne) ExecX(ctx context.Context) {
	if err := hwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hwuo *HymnsWorkUpdateOne) check() error {
	if hwuo.mutation.HymnsCleared() && len(hwuo.mutation.HymnsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HymnsWork.hymns"`)
	}
	return nil
}

func (hwuo *HymnsWorkUpdateOne) sqlSave(ctx context.Context) (_node *HymnsWork, err error) {
	if err := hwuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hymnswork.Table, hymnswork.Columns, sqlgraph.NewFieldSpec(hymnswork.FieldID, field.TypeInt))
	id, ok := hwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HymnsWork.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hymnswork.FieldID)
		for _, f := range fields {
			if !hymnswork.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hymnswork.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hwuo.mutation.WorkID(); ok {
		_spec.SetField(hymnswork.FieldWorkID, field.TypeUUID, value)
	}
	if value, ok := hwuo.mutation.Score(); ok {
		_spec.SetField(hymnswork.FieldScore, field.TypeBytes, value)
	}
	if value, ok := hwuo.mutation.NameJpRational(); ok {
		_spec.SetField(hymnswork.FieldNameJpRational, field.TypeString, value)
	}
	if value, ok := hwuo.mutation.UpdatedTime(); ok {
		_spec.SetField(hymnswork.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := hwuo.mutation.Biko(); ok {
		_spec.SetField(hymnswork.FieldBiko, field.TypeString, value)
	}
	if hwuo.mutation.HymnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hymnswork.HymnsTable,
			Columns: []string{hymnswork.HymnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymn.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hwuo.mutation.HymnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hymnswork.HymnsTable,
			Columns: []string{hymnswork.HymnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HymnsWork{config: hwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hymnswork.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hwuo.mutation.done = true
	return _node, nil
}
