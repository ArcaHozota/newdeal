// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newdeal/ent/hymn"
	"newdeal/ent/hymnswork"
	"newdeal/ent/predicate"
	"newdeal/ent/student"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HymnUpdate is the builder for updating Hymn entities.
type HymnUpdate struct {
	config
	hooks    []Hook
	mutation *HymnMutation
}

// Where appends a list predicates to the HymnUpdate builder.
func (hu *HymnUpdate) Where(ps ...predicate.Hymn) *HymnUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetNameJp sets the "name_jp" field.
func (hu *HymnUpdate) SetNameJp(s string) *HymnUpdate {
	hu.mutation.SetNameJp(s)
	return hu
}

// SetNillableNameJp sets the "name_jp" field if the given value is not nil.
func (hu *HymnUpdate) SetNillableNameJp(s *string) *HymnUpdate {
	if s != nil {
		hu.SetNameJp(*s)
	}
	return hu
}

// SetNameKr sets the "name_kr" field.
func (hu *HymnUpdate) SetNameKr(s string) *HymnUpdate {
	hu.mutation.SetNameKr(s)
	return hu
}

// SetNillableNameKr sets the "name_kr" field if the given value is not nil.
func (hu *HymnUpdate) SetNillableNameKr(s *string) *HymnUpdate {
	if s != nil {
		hu.SetNameKr(*s)
	}
	return hu
}

// SetLink sets the "link" field.
func (hu *HymnUpdate) SetLink(s string) *HymnUpdate {
	hu.mutation.SetLink(s)
	return hu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (hu *HymnUpdate) SetNillableLink(s *string) *HymnUpdate {
	if s != nil {
		hu.SetLink(*s)
	}
	return hu
}

// ClearLink clears the value of the "link" field.
func (hu *HymnUpdate) ClearLink() *HymnUpdate {
	hu.mutation.ClearLink()
	return hu
}

// SetUpdatedUser sets the "updated_user" field.
func (hu *HymnUpdate) SetUpdatedUser(i int64) *HymnUpdate {
	hu.mutation.SetUpdatedUser(i)
	return hu
}

// SetNillableUpdatedUser sets the "updated_user" field if the given value is not nil.
func (hu *HymnUpdate) SetNillableUpdatedUser(i *int64) *HymnUpdate {
	if i != nil {
		hu.SetUpdatedUser(*i)
	}
	return hu
}

// SetUpdatedTime sets the "updated_time" field.
func (hu *HymnUpdate) SetUpdatedTime(t time.Time) *HymnUpdate {
	hu.mutation.SetUpdatedTime(t)
	return hu
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (hu *HymnUpdate) SetNillableUpdatedTime(t *time.Time) *HymnUpdate {
	if t != nil {
		hu.SetUpdatedTime(*t)
	}
	return hu
}

// SetSerif sets the "serif" field.
func (hu *HymnUpdate) SetSerif(s string) *HymnUpdate {
	hu.mutation.SetSerif(s)
	return hu
}

// SetNillableSerif sets the "serif" field if the given value is not nil.
func (hu *HymnUpdate) SetNillableSerif(s *string) *HymnUpdate {
	if s != nil {
		hu.SetSerif(*s)
	}
	return hu
}

// ClearSerif clears the value of the "serif" field.
func (hu *HymnUpdate) ClearSerif() *HymnUpdate {
	hu.mutation.ClearSerif()
	return hu
}

// SetVisibleFlg sets the "visible_flg" field.
func (hu *HymnUpdate) SetVisibleFlg(b bool) *HymnUpdate {
	hu.mutation.SetVisibleFlg(b)
	return hu
}

// SetNillableVisibleFlg sets the "visible_flg" field if the given value is not nil.
func (hu *HymnUpdate) SetNillableVisibleFlg(b *bool) *HymnUpdate {
	if b != nil {
		hu.SetVisibleFlg(*b)
	}
	return hu
}

// SetUpdatedByID sets the "updated_by" edge to the Student entity by ID.
func (hu *HymnUpdate) SetUpdatedByID(id int64) *HymnUpdate {
	hu.mutation.SetUpdatedByID(id)
	return hu
}

// SetUpdatedBy sets the "updated_by" edge to the Student entity.
func (hu *HymnUpdate) SetUpdatedBy(s *Student) *HymnUpdate {
	return hu.SetUpdatedByID(s.ID)
}

// SetWorkID sets the "work" edge to the HymnsWork entity by ID.
func (hu *HymnUpdate) SetWorkID(id int64) *HymnUpdate {
	hu.mutation.SetWorkID(id)
	return hu
}

// SetNillableWorkID sets the "work" edge to the HymnsWork entity by ID if the given value is not nil.
func (hu *HymnUpdate) SetNillableWorkID(id *int64) *HymnUpdate {
	if id != nil {
		hu = hu.SetWorkID(*id)
	}
	return hu
}

// SetWork sets the "work" edge to the HymnsWork entity.
func (hu *HymnUpdate) SetWork(h *HymnsWork) *HymnUpdate {
	return hu.SetWorkID(h.ID)
}

// Mutation returns the HymnMutation object of the builder.
func (hu *HymnUpdate) Mutation() *HymnMutation {
	return hu.mutation
}

// ClearUpdatedBy clears the "updated_by" edge to the Student entity.
func (hu *HymnUpdate) ClearUpdatedBy() *HymnUpdate {
	hu.mutation.ClearUpdatedBy()
	return hu
}

// ClearWork clears the "work" edge to the HymnsWork entity.
func (hu *HymnUpdate) ClearWork() *HymnUpdate {
	hu.mutation.ClearWork()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HymnUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HymnUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HymnUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HymnUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HymnUpdate) check() error {
	if hu.mutation.UpdatedByCleared() && len(hu.mutation.UpdatedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Hymn.updated_by"`)
	}
	return nil
}

func (hu *HymnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hymn.Table, hymn.Columns, sqlgraph.NewFieldSpec(hymn.FieldID, field.TypeInt64))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.NameJp(); ok {
		_spec.SetField(hymn.FieldNameJp, field.TypeString, value)
	}
	if value, ok := hu.mutation.NameKr(); ok {
		_spec.SetField(hymn.FieldNameKr, field.TypeString, value)
	}
	if value, ok := hu.mutation.Link(); ok {
		_spec.SetField(hymn.FieldLink, field.TypeString, value)
	}
	if hu.mutation.LinkCleared() {
		_spec.ClearField(hymn.FieldLink, field.TypeString)
	}
	if value, ok := hu.mutation.UpdatedTime(); ok {
		_spec.SetField(hymn.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := hu.mutation.Serif(); ok {
		_spec.SetField(hymn.FieldSerif, field.TypeString, value)
	}
	if hu.mutation.SerifCleared() {
		_spec.ClearField(hymn.FieldSerif, field.TypeString)
	}
	if value, ok := hu.mutation.VisibleFlg(); ok {
		_spec.SetField(hymn.FieldVisibleFlg, field.TypeBool, value)
	}
	if hu.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hymn.UpdatedByTable,
			Columns: []string{hymn.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hymn.UpdatedByTable,
			Columns: []string{hymn.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.WorkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hymn.WorkTable,
			Columns: []string{hymn.WorkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymnswork.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.WorkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hymn.WorkTable,
			Columns: []string{hymn.WorkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymnswork.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hymn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HymnUpdateOne is the builder for updating a single Hymn entity.
type HymnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HymnMutation
}

// SetNameJp sets the "name_jp" field.
func (huo *HymnUpdateOne) SetNameJp(s string) *HymnUpdateOne {
	huo.mutation.SetNameJp(s)
	return huo
}

// SetNillableNameJp sets the "name_jp" field if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableNameJp(s *string) *HymnUpdateOne {
	if s != nil {
		huo.SetNameJp(*s)
	}
	return huo
}

// SetNameKr sets the "name_kr" field.
func (huo *HymnUpdateOne) SetNameKr(s string) *HymnUpdateOne {
	huo.mutation.SetNameKr(s)
	return huo
}

// SetNillableNameKr sets the "name_kr" field if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableNameKr(s *string) *HymnUpdateOne {
	if s != nil {
		huo.SetNameKr(*s)
	}
	return huo
}

// SetLink sets the "link" field.
func (huo *HymnUpdateOne) SetLink(s string) *HymnUpdateOne {
	huo.mutation.SetLink(s)
	return huo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableLink(s *string) *HymnUpdateOne {
	if s != nil {
		huo.SetLink(*s)
	}
	return huo
}

// ClearLink clears the value of the "link" field.
func (huo *HymnUpdateOne) ClearLink() *HymnUpdateOne {
	huo.mutation.ClearLink()
	return huo
}

// SetUpdatedUser sets the "updated_user" field.
func (huo *HymnUpdateOne) SetUpdatedUser(i int64) *HymnUpdateOne {
	huo.mutation.SetUpdatedUser(i)
	return huo
}

// SetNillableUpdatedUser sets the "updated_user" field if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableUpdatedUser(i *int64) *HymnUpdateOne {
	if i != nil {
		huo.SetUpdatedUser(*i)
	}
	return huo
}

// SetUpdatedTime sets the "updated_time" field.
func (huo *HymnUpdateOne) SetUpdatedTime(t time.Time) *HymnUpdateOne {
	huo.mutation.SetUpdatedTime(t)
	return huo
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableUpdatedTime(t *time.Time) *HymnUpdateOne {
	if t != nil {
		huo.SetUpdatedTime(*t)
	}
	return huo
}

// SetSerif sets the "serif" field.
func (huo *HymnUpdateOne) SetSerif(s string) *HymnUpdateOne {
	huo.mutation.SetSerif(s)
	return huo
}

// SetNillableSerif sets the "serif" field if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableSerif(s *string) *HymnUpdateOne {
	if s != nil {
		huo.SetSerif(*s)
	}
	return huo
}

// ClearSerif clears the value of the "serif" field.
func (huo *HymnUpdateOne) ClearSerif() *HymnUpdateOne {
	huo.mutation.ClearSerif()
	return huo
}

// SetVisibleFlg sets the "visible_flg" field.
func (huo *HymnUpdateOne) SetVisibleFlg(b bool) *HymnUpdateOne {
	huo.mutation.SetVisibleFlg(b)
	return huo
}

// SetNillableVisibleFlg sets the "visible_flg" field if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableVisibleFlg(b *bool) *HymnUpdateOne {
	if b != nil {
		huo.SetVisibleFlg(*b)
	}
	return huo
}

// SetUpdatedByID sets the "updated_by" edge to the Student entity by ID.
func (huo *HymnUpdateOne) SetUpdatedByID(id int64) *HymnUpdateOne {
	huo.mutation.SetUpdatedByID(id)
	return huo
}

// SetUpdatedBy sets the "updated_by" edge to the Student entity.
func (huo *HymnUpdateOne) SetUpdatedBy(s *Student) *HymnUpdateOne {
	return huo.SetUpdatedByID(s.ID)
}

// SetWorkID sets the "work" edge to the HymnsWork entity by ID.
func (huo *HymnUpdateOne) SetWorkID(id int64) *HymnUpdateOne {
	huo.mutation.SetWorkID(id)
	return huo
}

// SetNillableWorkID sets the "work" edge to the HymnsWork entity by ID if the given value is not nil.
func (huo *HymnUpdateOne) SetNillableWorkID(id *int64) *HymnUpdateOne {
	if id != nil {
		huo = huo.SetWorkID(*id)
	}
	return huo
}

// SetWork sets the "work" edge to the HymnsWork entity.
func (huo *HymnUpdateOne) SetWork(h *HymnsWork) *HymnUpdateOne {
	return huo.SetWorkID(h.ID)
}

// Mutation returns the HymnMutation object of the builder.
func (huo *HymnUpdateOne) Mutation() *HymnMutation {
	return huo.mutation
}

// ClearUpdatedBy clears the "updated_by" edge to the Student entity.
func (huo *HymnUpdateOne) ClearUpdatedBy() *HymnUpdateOne {
	huo.mutation.ClearUpdatedBy()
	return huo
}

// ClearWork clears the "work" edge to the HymnsWork entity.
func (huo *HymnUpdateOne) ClearWork() *HymnUpdateOne {
	huo.mutation.ClearWork()
	return huo
}

// Where appends a list predicates to the HymnUpdate builder.
func (huo *HymnUpdateOne) Where(ps ...predicate.Hymn) *HymnUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HymnUpdateOne) Select(field string, fields ...string) *HymnUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hymn entity.
func (huo *HymnUpdateOne) Save(ctx context.Context) (*Hymn, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HymnUpdateOne) SaveX(ctx context.Context) *Hymn {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HymnUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HymnUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HymnUpdateOne) check() error {
	if huo.mutation.UpdatedByCleared() && len(huo.mutation.UpdatedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Hymn.updated_by"`)
	}
	return nil
}

func (huo *HymnUpdateOne) sqlSave(ctx context.Context) (_node *Hymn, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hymn.Table, hymn.Columns, sqlgraph.NewFieldSpec(hymn.FieldID, field.TypeInt64))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hymn.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hymn.FieldID)
		for _, f := range fields {
			if !hymn.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hymn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.NameJp(); ok {
		_spec.SetField(hymn.FieldNameJp, field.TypeString, value)
	}
	if value, ok := huo.mutation.NameKr(); ok {
		_spec.SetField(hymn.FieldNameKr, field.TypeString, value)
	}
	if value, ok := huo.mutation.Link(); ok {
		_spec.SetField(hymn.FieldLink, field.TypeString, value)
	}
	if huo.mutation.LinkCleared() {
		_spec.ClearField(hymn.FieldLink, field.TypeString)
	}
	if value, ok := huo.mutation.UpdatedTime(); ok {
		_spec.SetField(hymn.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := huo.mutation.Serif(); ok {
		_spec.SetField(hymn.FieldSerif, field.TypeString, value)
	}
	if huo.mutation.SerifCleared() {
		_spec.ClearField(hymn.FieldSerif, field.TypeString)
	}
	if value, ok := huo.mutation.VisibleFlg(); ok {
		_spec.SetField(hymn.FieldVisibleFlg, field.TypeBool, value)
	}
	if huo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hymn.UpdatedByTable,
			Columns: []string{hymn.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hymn.UpdatedByTable,
			Columns: []string{hymn.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.WorkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hymn.WorkTable,
			Columns: []string{hymn.WorkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymnswork.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.WorkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hymn.WorkTable,
			Columns: []string{hymn.WorkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hymnswork.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hymn{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hymn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
