// Code generated by ent, DO NOT EDIT.

package hymn

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hymn type in the database.
	Label = "hymn"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNameJp holds the string denoting the name_jp field in the database.
	FieldNameJp = "name_jp"
	// FieldNameKr holds the string denoting the name_kr field in the database.
	FieldNameKr = "name_kr"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldUpdatedUser holds the string denoting the updated_user field in the database.
	FieldUpdatedUser = "updated_user"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldSerif holds the string denoting the serif field in the database.
	FieldSerif = "serif"
	// FieldVisibleFlg holds the string denoting the visible_flg field in the database.
	FieldVisibleFlg = "visible_flg"
	// EdgeUpdatedBy holds the string denoting the updated_by edge name in mutations.
	EdgeUpdatedBy = "updated_by"
	// EdgeWork holds the string denoting the work edge name in mutations.
	EdgeWork = "work"
	// Table holds the table name of the hymn in the database.
	Table = "hymns"
	// UpdatedByTable is the table that holds the updated_by relation/edge.
	UpdatedByTable = "hymns"
	// UpdatedByInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	UpdatedByInverseTable = "students"
	// UpdatedByColumn is the table column denoting the updated_by relation/edge.
	UpdatedByColumn = "updated_user"
	// WorkTable is the table that holds the work relation/edge.
	WorkTable = "hymns_work"
	// WorkInverseTable is the table name for the HymnsWork entity.
	// It exists in this package in order to avoid circular dependency with the "hymnswork" package.
	WorkInverseTable = "hymns_work"
	// WorkColumn is the table column denoting the work relation/edge.
	WorkColumn = "work_id"
)

// Columns holds all SQL columns for hymn fields.
var Columns = []string{
	FieldID,
	FieldNameJp,
	FieldNameKr,
	FieldLink,
	FieldUpdatedUser,
	FieldUpdatedTime,
	FieldSerif,
	FieldVisibleFlg,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameJpValidator is a validator for the "name_jp" field. It is called by the builders before save.
	NameJpValidator func(string) error
	// NameKrValidator is a validator for the "name_kr" field. It is called by the builders before save.
	NameKrValidator func(string) error
	// LinkValidator is a validator for the "link" field. It is called by the builders before save.
	LinkValidator func(string) error
)

// OrderOption defines the ordering options for the Hymn queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNameJp orders the results by the name_jp field.
func ByNameJp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameJp, opts...).ToFunc()
}

// ByNameKr orders the results by the name_kr field.
func ByNameKr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameKr, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByUpdatedUser orders the results by the updated_user field.
func ByUpdatedUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedUser, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// BySerif orders the results by the serif field.
func BySerif(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerif, opts...).ToFunc()
}

// ByVisibleFlg orders the results by the visible_flg field.
func ByVisibleFlg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibleFlg, opts...).ToFunc()
}

// ByUpdatedByField orders the results by updated_by field.
func ByUpdatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkField orders the results by work field.
func ByWorkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkStep(), sql.OrderByField(field, opts...))
	}
}
func newUpdatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdatedByTable, UpdatedByColumn),
	)
}
func newWorkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, WorkTable, WorkColumn),
	)
}
