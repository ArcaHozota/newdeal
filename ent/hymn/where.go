// Code generated by ent, DO NOT EDIT.

package hymn

import (
	"newdeal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Hymn {
	return predicate.Hymn(sql.FieldLTE(FieldID, id))
}

// NameJp applies equality check predicate on the "name_jp" field. It's identical to NameJpEQ.
func NameJp(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldNameJp, v))
}

// NameKr applies equality check predicate on the "name_kr" field. It's identical to NameKrEQ.
func NameKr(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldNameKr, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldLink, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedUser applies equality check predicate on the "updated_user" field. It's identical to UpdatedUserEQ.
func UpdatedUser(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldUpdatedUser, v))
}

// Serif applies equality check predicate on the "serif" field. It's identical to SerifEQ.
func Serif(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldSerif, v))
}

// VisibleFlg applies equality check predicate on the "visible_flg" field. It's identical to VisibleFlgEQ.
func VisibleFlg(v bool) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldVisibleFlg, v))
}

// NameJpEQ applies the EQ predicate on the "name_jp" field.
func NameJpEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldNameJp, v))
}

// NameJpNEQ applies the NEQ predicate on the "name_jp" field.
func NameJpNEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldNameJp, v))
}

// NameJpIn applies the In predicate on the "name_jp" field.
func NameJpIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldIn(FieldNameJp, vs...))
}

// NameJpNotIn applies the NotIn predicate on the "name_jp" field.
func NameJpNotIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNotIn(FieldNameJp, vs...))
}

// NameJpGT applies the GT predicate on the "name_jp" field.
func NameJpGT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGT(FieldNameJp, v))
}

// NameJpGTE applies the GTE predicate on the "name_jp" field.
func NameJpGTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGTE(FieldNameJp, v))
}

// NameJpLT applies the LT predicate on the "name_jp" field.
func NameJpLT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLT(FieldNameJp, v))
}

// NameJpLTE applies the LTE predicate on the "name_jp" field.
func NameJpLTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLTE(FieldNameJp, v))
}

// NameJpContains applies the Contains predicate on the "name_jp" field.
func NameJpContains(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContains(FieldNameJp, v))
}

// NameJpHasPrefix applies the HasPrefix predicate on the "name_jp" field.
func NameJpHasPrefix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasPrefix(FieldNameJp, v))
}

// NameJpHasSuffix applies the HasSuffix predicate on the "name_jp" field.
func NameJpHasSuffix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasSuffix(FieldNameJp, v))
}

// NameJpEqualFold applies the EqualFold predicate on the "name_jp" field.
func NameJpEqualFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEqualFold(FieldNameJp, v))
}

// NameJpContainsFold applies the ContainsFold predicate on the "name_jp" field.
func NameJpContainsFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContainsFold(FieldNameJp, v))
}

// NameKrEQ applies the EQ predicate on the "name_kr" field.
func NameKrEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldNameKr, v))
}

// NameKrNEQ applies the NEQ predicate on the "name_kr" field.
func NameKrNEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldNameKr, v))
}

// NameKrIn applies the In predicate on the "name_kr" field.
func NameKrIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldIn(FieldNameKr, vs...))
}

// NameKrNotIn applies the NotIn predicate on the "name_kr" field.
func NameKrNotIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNotIn(FieldNameKr, vs...))
}

// NameKrGT applies the GT predicate on the "name_kr" field.
func NameKrGT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGT(FieldNameKr, v))
}

// NameKrGTE applies the GTE predicate on the "name_kr" field.
func NameKrGTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGTE(FieldNameKr, v))
}

// NameKrLT applies the LT predicate on the "name_kr" field.
func NameKrLT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLT(FieldNameKr, v))
}

// NameKrLTE applies the LTE predicate on the "name_kr" field.
func NameKrLTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLTE(FieldNameKr, v))
}

// NameKrContains applies the Contains predicate on the "name_kr" field.
func NameKrContains(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContains(FieldNameKr, v))
}

// NameKrHasPrefix applies the HasPrefix predicate on the "name_kr" field.
func NameKrHasPrefix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasPrefix(FieldNameKr, v))
}

// NameKrHasSuffix applies the HasSuffix predicate on the "name_kr" field.
func NameKrHasSuffix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasSuffix(FieldNameKr, v))
}

// NameKrEqualFold applies the EqualFold predicate on the "name_kr" field.
func NameKrEqualFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEqualFold(FieldNameKr, v))
}

// NameKrContainsFold applies the ContainsFold predicate on the "name_kr" field.
func NameKrContainsFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContainsFold(FieldNameKr, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasSuffix(FieldLink, v))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContainsFold(FieldLink, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.Hymn {
	return predicate.Hymn(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedUserEQ applies the EQ predicate on the "updated_user" field.
func UpdatedUserEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldUpdatedUser, v))
}

// UpdatedUserNEQ applies the NEQ predicate on the "updated_user" field.
func UpdatedUserNEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldUpdatedUser, v))
}

// UpdatedUserIn applies the In predicate on the "updated_user" field.
func UpdatedUserIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldIn(FieldUpdatedUser, vs...))
}

// UpdatedUserNotIn applies the NotIn predicate on the "updated_user" field.
func UpdatedUserNotIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNotIn(FieldUpdatedUser, vs...))
}

// UpdatedUserGT applies the GT predicate on the "updated_user" field.
func UpdatedUserGT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGT(FieldUpdatedUser, v))
}

// UpdatedUserGTE applies the GTE predicate on the "updated_user" field.
func UpdatedUserGTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGTE(FieldUpdatedUser, v))
}

// UpdatedUserLT applies the LT predicate on the "updated_user" field.
func UpdatedUserLT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLT(FieldUpdatedUser, v))
}

// UpdatedUserLTE applies the LTE predicate on the "updated_user" field.
func UpdatedUserLTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLTE(FieldUpdatedUser, v))
}

// UpdatedUserContains applies the Contains predicate on the "updated_user" field.
func UpdatedUserContains(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContains(FieldUpdatedUser, v))
}

// UpdatedUserHasPrefix applies the HasPrefix predicate on the "updated_user" field.
func UpdatedUserHasPrefix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasPrefix(FieldUpdatedUser, v))
}

// UpdatedUserHasSuffix applies the HasSuffix predicate on the "updated_user" field.
func UpdatedUserHasSuffix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasSuffix(FieldUpdatedUser, v))
}

// UpdatedUserEqualFold applies the EqualFold predicate on the "updated_user" field.
func UpdatedUserEqualFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEqualFold(FieldUpdatedUser, v))
}

// UpdatedUserContainsFold applies the ContainsFold predicate on the "updated_user" field.
func UpdatedUserContainsFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContainsFold(FieldUpdatedUser, v))
}

// SerifEQ applies the EQ predicate on the "serif" field.
func SerifEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldSerif, v))
}

// SerifNEQ applies the NEQ predicate on the "serif" field.
func SerifNEQ(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldSerif, v))
}

// SerifIn applies the In predicate on the "serif" field.
func SerifIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldIn(FieldSerif, vs...))
}

// SerifNotIn applies the NotIn predicate on the "serif" field.
func SerifNotIn(vs ...string) predicate.Hymn {
	return predicate.Hymn(sql.FieldNotIn(FieldSerif, vs...))
}

// SerifGT applies the GT predicate on the "serif" field.
func SerifGT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGT(FieldSerif, v))
}

// SerifGTE applies the GTE predicate on the "serif" field.
func SerifGTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldGTE(FieldSerif, v))
}

// SerifLT applies the LT predicate on the "serif" field.
func SerifLT(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLT(FieldSerif, v))
}

// SerifLTE applies the LTE predicate on the "serif" field.
func SerifLTE(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldLTE(FieldSerif, v))
}

// SerifContains applies the Contains predicate on the "serif" field.
func SerifContains(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContains(FieldSerif, v))
}

// SerifHasPrefix applies the HasPrefix predicate on the "serif" field.
func SerifHasPrefix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasPrefix(FieldSerif, v))
}

// SerifHasSuffix applies the HasSuffix predicate on the "serif" field.
func SerifHasSuffix(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldHasSuffix(FieldSerif, v))
}

// SerifEqualFold applies the EqualFold predicate on the "serif" field.
func SerifEqualFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldEqualFold(FieldSerif, v))
}

// SerifContainsFold applies the ContainsFold predicate on the "serif" field.
func SerifContainsFold(v string) predicate.Hymn {
	return predicate.Hymn(sql.FieldContainsFold(FieldSerif, v))
}

// VisibleFlgEQ applies the EQ predicate on the "visible_flg" field.
func VisibleFlgEQ(v bool) predicate.Hymn {
	return predicate.Hymn(sql.FieldEQ(FieldVisibleFlg, v))
}

// VisibleFlgNEQ applies the NEQ predicate on the "visible_flg" field.
func VisibleFlgNEQ(v bool) predicate.Hymn {
	return predicate.Hymn(sql.FieldNEQ(FieldVisibleFlg, v))
}

// HasStudents applies the HasEdge predicate on the "students" edge.
func HasStudents() predicate.Hymn {
	return predicate.Hymn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentsTable, StudentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentsWith applies the HasEdge predicate on the "students" edge with a given conditions (other predicates).
func HasStudentsWith(preds ...predicate.Student) predicate.Hymn {
	return predicate.Hymn(func(s *sql.Selector) {
		step := newStudentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHymnsWork applies the HasEdge predicate on the "hymns_work" edge.
func HasHymnsWork() predicate.Hymn {
	return predicate.Hymn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, HymnsWorkTable, HymnsWorkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHymnsWorkWith applies the HasEdge predicate on the "hymns_work" edge with a given conditions (other predicates).
func HasHymnsWorkWith(preds ...predicate.HymnsWork) predicate.Hymn {
	return predicate.Hymn(func(s *sql.Selector) {
		step := newHymnsWorkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hymn) predicate.Hymn {
	return predicate.Hymn(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hymn) predicate.Hymn {
	return predicate.Hymn(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hymn) predicate.Hymn {
	return predicate.Hymn(sql.NotPredicates(p))
}
